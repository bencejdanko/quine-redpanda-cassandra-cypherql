{"openapi":"3.0.0","info":{"title":"Quine API","version":"1.9.0","description":"The following is autogenerated from the OpenAPI specification `openapi.json` \nand is included in Quine as fully interactive documentation. When running \nQuine, you can issue API calls directly from the embedded documentation pages.\n \nFor docs, guides, and tutorials, please visit <https://quine.io>"},"paths":{"/api/v1/admin/build-info":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.QuineInfo"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Build Information","description":"Returns a JSON object containing information about how Quine was built","tags":["Administration"]}},"/api/v1/admin/config":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":{"quine":{"in-memory-soft-node-limit":10000,"shard-count":4,"help-make-quine-better":true,"metrics-reporters":[{"type":"jmx"}],"store":{"filepath":"quine.db","type":"rocks-db","write-ahead-log":true,"sync-all-writes":false,"create-parent-dir":false},"labels-property":"__LABEL","ingest-2-enabled":false,"dump-config":false,"in-memory-hard-node-limit":75000,"id":{"type":"uuid","partitioned":false},"edge-iteration":"reverse-insertion","log-config":{"redactor":{"type":"redact-hide"},"show-exceptions":true,"show-unsafe":true},"api-2-enabled":false,"metrics":{"enable-debug-metrics":false},"decline-sleep-when-write-within":"100ms","timeout":"2m","webserver":{"address":"0.0.0.0","enabled":true,"port":8080,"use-tls":false},"max-catch-up-sleep":"2s","decline-sleep-when-access-within":"0","should-resume-ingest":false,"persistence":{"standing-query-schedule":"on-node-sleep","snapshot-singleton":false,"effect-order":"persistor-first","snapshot-schedule":"on-node-sleep","journal-enabled":true}}},"type":""}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Running Configuration","description":"Fetch the full configuration of the running system. \"Full\" means that this\nevery option value is specified including all specified config files, command line\noptions, and default values.\n\nThis does _not_ include external options, for example, the\nPekko HTTP option `org.apache.pekko.http.server.request-timeout` can be used to adjust the web\nserver request timeout of this REST API, but it won't show up in the response of this\nendpoint.\n","tags":["Administration"]}},"/api/v1/admin/graph-hash-code":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"title":"Graph hash code","type":"object","properties":{"value":{"description":"Hash value derived from the state of the graph (nodes, properties, and edges)","type":"integer","format":"int64"},"atTime":{"description":"Time value used to derive the graph hash code","type":"integer","format":"int64"}},"required":["value","atTime"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Graph Hash Code","description":"Generate a hash of the state of the graph at the provided timestamp.\n\nThis is done by materializing readonly/historical versions of all nodes at a particular timestamp and\ngenerating a checksum based on their (serialized) properties and edges.\n\nThe timestamp defaults to the server's current clock time if not provided.\n\nBecause this relies on historical nodes, results may be inconsistent if running on a configuration with\njournals disabled.","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"}],"tags":["Administration"]}},"/api/v1/admin/liveness":{"get":{"responses":{"204":{"description":"System is live"},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Process Liveness","description":"This is a basic no-op endpoint for use when checking if the system is hung or responsive.\n The intended use is for a process manager to restart the process if the app is hung (non-responsive).\n It does not otherwise indicate readiness to handle data requests or system health.\n Returns a 204 response.","tags":["Administration"]}},"/api/v1/admin/metrics":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.MetricsReport"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Metrics Summary","description":"Returns a JSON object containing metrics data used in the Quine  [Monitoring](https://docs.quine.io/core-concepts/operational-considerations.html#monitoring)  dashboard. The selection of metrics is based on current configuration and execution environment, and is subject to change. A few metrics of note include:\n\nCounters\n\n - `node.edge-counts.*`: Histogram-style summaries of edges per node\n - `node.property-counts.*`: Histogram-style summaries of properties per node\n - `shard.*.sleep-counters`: Count of nodes managed by a shard that have gone through various lifecycle\n   states. These can be used to estimate the number of awake nodes.\n\nTimers\n\n - `persistor.get-journal`: Time taken to read and deserialize a single node's relevant journal\n - `persistor.persist-event`: Time taken to serialize and persist one message's worth of on-node events\n - `persistor.get-latest-snapshot`: Time taken to read (but not deserialize) a single node snapshot\n\n Gauges\n - `memory.heap.*`: JVM heap usage\n - `memory.total`: JVM combined memory usage\n - `shared.valve.ingest`: Number of current requests to slow ingest for another part of Quine to catch up\n - `dgn-reg.count`: Number of in-memory registered DomainGraphNodes\n","tags":["Administration"]}},"/api/v1/admin/readiness":{"get":{"responses":{"204":{"description":"System is ready to serve requests"},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"503":{"description":"System is not ready"}},"summary":"Process Readiness","description":"This indicates whether the system is fully up and ready to service user requests.\nThe intended use is for a load balancer to use this to know when the instance is\nup ready and start routing user requests to it.\n","tags":["Administration"]}},"/api/v1/admin/request-node-sleep/{id}":{"post":{"responses":{"202":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Sleep Node","description":"Attempt to put the specified node to sleep.\n\nThis behavior is not guaranteed. Activity on the node will supersede this request","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true}],"tags":["Administration"]}},"/api/v1/admin/shard-sizes":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"A map of shard IDs to shard in-memory node limits","example":{"0":{"softLimit":10000,"hardLimit":75000},"1":{"softLimit":10000,"hardLimit":75000},"2":{"softLimit":10000,"hardLimit":75000},"3":{"softLimit":10000,"hardLimit":75000}},"title":"Shard Sizes Map","type":"object","properties":{},"additionalProperties":{"title":"Shard In-Memory Limits","type":"object","properties":{"softLimit":{"description":"Number of in-memory nodes past which shards will try to shut down nodes","type":"integer","format":"int32"},"hardLimit":{"description":"Number of in-memory nodes past which shards will not load in new nodes","type":"integer","format":"int32"}},"required":["softLimit","hardLimit"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Shard Sizes","description":"Get and update the in-memory node limits.\n\nSending a request containing an empty json object will return the current in-memory node settings.\n\nTo apply different values, apply your edits to the returned document and sent those values in\na new POST request.\n","requestBody":{"required":true,"content":{"application/json":{"schema":{"description":"A map of shard IDs to shard in-memory node limits","example":{"0":{"softLimit":10000,"hardLimit":75000},"1":{"softLimit":10000,"hardLimit":75000},"2":{"softLimit":10000,"hardLimit":75000},"3":{"softLimit":10000,"hardLimit":75000}},"title":"Shard Sizes Map","type":"object","properties":{},"additionalProperties":{"title":"Shard In-Memory Limits","type":"object","properties":{"softLimit":{"description":"Number of in-memory nodes past which shards will try to shut down nodes","type":"integer","format":"int32"},"hardLimit":{"description":"Number of in-memory nodes past which shards will not load in new nodes","type":"integer","format":"int32"}},"required":["softLimit","hardLimit"]}}},"application/yaml":{"schema":{"description":"A map of shard IDs to shard in-memory node limits","example":{"0":{"softLimit":10000,"hardLimit":75000},"1":{"softLimit":10000,"hardLimit":75000},"2":{"softLimit":10000,"hardLimit":75000},"3":{"softLimit":10000,"hardLimit":75000}},"title":"Shard Sizes Map","type":"object","properties":{},"additionalProperties":{"title":"Shard In-Memory Limits","type":"object","properties":{"softLimit":{"description":"Number of in-memory nodes past which shards will try to shut down nodes","type":"integer","format":"int32"},"hardLimit":{"description":"Number of in-memory nodes past which shards will not load in new nodes","type":"integer","format":"int32"}},"required":["softLimit","hardLimit"]}},"example":"'0':\n  softLimit: 10000\n  hardLimit: 75000\n'1':\n  softLimit: 10000\n  hardLimit: 75000\n'2':\n  softLimit: 10000\n  hardLimit: 75000\n'3':\n  softLimit: 10000\n  hardLimit: 75000\n"}}},"tags":["Administration"]}},"/api/v1/admin/shutdown":{"post":{"responses":{"202":{"description":"Shutdown initiated"},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Graceful Shutdown","description":"Initiate a graceful graph shutdown. Final shutdown may take a little longer.","tags":["Administration"]}},"/api/v1/algorithm/walk":{"put":{"responses":{"202":{"description":"","content":{"text/plain":{"schema":{"type":"string"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - Invalid file\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Save Random Walks","description":"Generate random walks from all nodes in the graph (optionally: at a specific historical time), and save\nthe results.\n\nThe output file is a CSV where each row is one random walk. The first column will always\nbe the node ID where the walk originated. Each subsequent column will be either:\n\na.) by default, the ID of each node encountered (including the starting node ID again in the second\ncolumn), or\n\nb.) optionally, the results of Cypher query executed from each node encountered on the walk; where\nmultiple columns and rows returned from this query will be concatenated together sequentially into\nthe aggregated walk results.\n\n**The resulting CSV may have rows of varying length.**\n\nThe name of the output file is derived from the arguments used to generate it; or a custom file name can\nbe specified in the API request body. If no custom name is specified, the following values are\nconcatenated to produce the final file name:\n\n - the constant prefix: `graph-walk-`\n - the timestamp provided in `at-time` or else the current time when run. A trailing `_T` is appended if no timestamp was specified.\n - the `length` parameter followed by the constant `x`\n - the `count` parameter\n - the constant `-q` follow by the number of characters in the supplied `query` (`0` if not specified)\n - the `return` parameter followed by the constant `x`\n - the `in-out` parameter\n - the `seed` parameter or `_` if none was supplied\n - the constant suffix `.csv`\n\n Example file name: `graph-walk-1675122348011_T-10x5-q0-1.0x1.0-_.csv`\n\n The name of the actual file being written is returned in the API response body.","parameters":[{"name":"length","in":"query","schema":{"type":"integer","format":"int32"},"description":"Maximum length of a walk. Default: `10`"},{"name":"count","in":"query","schema":{"type":"integer","format":"int32"},"description":"An optional integer for how many random walks from each node to generate. Default: `5`"},{"name":"query","in":"query","schema":{"type":"string"},"description":"Cypher query run on each node of the walk. You can use this query to collect properties instead of node IDs.\nA `RETURN` statement can return any number of values, separated by `,`s. If returning the same value\nmultiple times, you will need to alias subsequent values with `AS` so that column names are unique. If a list\nis returned, its content will be flattened out one level and concatenated with the rest of the aggregated\nvalues.\n\nThe provided query will have the following prefix prepended: `MATCH (thisNode) WHERE id(thisNode) = $n ` where `$n` evaluates\nto the ID of the node on which the query is executed. The default value of this parameter is:\n`RETURN id(thisNode)`"},{"name":"return","in":"query","schema":{"type":"number","format":"double"},"description":"the `p` parameter to determine likelihood of returning to the node just visited: `1/p`  Lower is more likely; but if `0`, never return to previous node. Default: `1`"},{"name":"in-out","in":"query","schema":{"type":"number","format":"double"},"description":"the `q` parameter to determine likelihood of visiting a node outside the neighborhood of the starting node: `1/q`  Lower is more likely; but if `0`, never visit the neighborhood. Default: `1`"},{"name":"seed","in":"query","schema":{"type":"string"},"description":"Optionally specify any string as a random seed for generating walks. This is used to determine all randomness, so providing the same seed will always produce the same random walk. If unset, a new seed is used each time a random choice is needed."},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"parallelism","in":"query","schema":{"type":"integer","format":"int32"},"description":"Operations to execute simultaneously. Default: `16`"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"example":{"bucketName":"your-s3-bucket-name","type":"S3Bucket"},"title":"Save Location","oneOf":[{"title":"Local File","type":"object","properties":{"type":{"example":"LocalFile","type":"string","enum":["LocalFile"]},"fileName":{"description":"Optional name of the file to save in the working directory","type":"string"}},"required":["type"]},{"title":"S3 Bucket","type":"object","properties":{"type":{"example":"S3Bucket","type":"string","enum":["S3Bucket"]},"bucketName":{"description":"S3 bucket name","type":"string"},"key":{"description":"Optional name of the file in the S3 bucket","type":"string"}},"required":["type","bucketName"]}],"discriminator":{"propertyName":"type"}}}}},"tags":["Graph Algorithms"]}},"/api/v1/algorithm/walk/{id}":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Generate Random Walk","description":"Generate a random walk from a node in the graph and return the results.","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true},{"name":"length","in":"query","schema":{"type":"integer","format":"int32"},"description":"Maximum length of a walk. Default: `10`"},{"name":"query","in":"query","schema":{"type":"string"},"description":"Cypher query run on each node of the walk. You can use this query to collect properties instead of node IDs.\nA `RETURN` statement can return any number of values, separated by `,`s. If returning the same value\nmultiple times, you will need to alias subsequent values with `AS` so that column names are unique. If a list\nis returned, its content will be flattened out one level and concatenated with the rest of the aggregated\nvalues.\n\nThe provided query will have the following prefix prepended: `MATCH (thisNode) WHERE id(thisNode) = $n ` where `$n` evaluates\nto the ID of the node on which the query is executed. The default value of this parameter is:\n`RETURN id(thisNode)`"},{"name":"return","in":"query","schema":{"type":"number","format":"double"},"description":"the `p` parameter to determine likelihood of returning to the node just visited: `1/p`  Lower is more likely; but if `0`, never return to previous node. Default: `1`"},{"name":"in-out","in":"query","schema":{"type":"number","format":"double"},"description":"the `q` parameter to determine likelihood of visiting a node outside the neighborhood of the starting node: `1/q`  Lower is more likely; but if `0`, never visit the neighborhood. Default: `1`"},{"name":"seed","in":"query","schema":{"type":"string"},"description":"Optionally specify any string as a random seed for generating walks. This is used to determine all randomness, so providing the same seed will always produce the same random walk. If unset, a new seed is used each time a random choice is needed."},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"}],"tags":["Graph Algorithms"]}},"/api/v1/debug/{id}":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"Data locally available on a node in the graph.","title":"Node Data","type":"object","properties":{"properties":{"description":"Properties on the node; note that values are represented as closely as possible to how they would be emitted by [the cypher query endpoint](https://quine.io/reference/rest-api/#/paths/api-v1-query-cypher/post)","example":{"prop1":{"hello":"world"},"prop2":128,"another-prop":false},"type":"object","properties":{},"additionalProperties":{"example":{"name":"fruits-collection","fruits":["apple","orange","grape"]},"type":"","format":"quine-value"}},"edges":{"type":"array","items":{"description":"\nOne \"half\" of an edge. A full logical graph edge exists in a Quine graph if and only if\nthe two nodes at the edge's endpoints contain half edges that:\n\n  * Point to each other\n\n  * Have the same label\n\n  * Have opposite directions (eg. one side is incoming and the other is outgoing,\n    or else both sides are undirected)\n","title":"Half Edge","type":"object","properties":{"edgeType":{"description":"Label of the edge","type":"string"},"direction":{"description":"Direction of an edge in the graph","title":"Edge direction","type":"string","enum":["Outgoing","Incoming","Undirected"]},"other":{"description":"Id of node at the other end of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"}},"required":["edgeType","direction","other"]}}},"required":["properties","edges"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Properties/Edges","description":"Retrieve a node's list of properties and list of edges.\n\nThis endpoint's usage, including the structure of the values returned,\nare implementation-specific and subject to change without warning. This\nendpoint is not intended for consumption by automated clients. The information\nreturned by this endpoint is formatted for human consumption and is intended\nto assist the operator[s] of Quine in inspecting specific parts of the internal\nQuine graph state.\n\nFor querying from an automated system, use [one of the language-specific interfaces](https://quine.io/reference/rest-api#/paths/api-v1-query-cypher/post)","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"}],"tags":["Debug Node Operations"]}},"/api/v1/debug/{id}/edges":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"description":"\nOne \"half\" of an edge. A full logical graph edge exists in a Quine graph if and only if\nthe two nodes at the edge's endpoints contain half edges that:\n\n  * Point to each other\n\n  * Have the same label\n\n  * Have opposite directions (eg. one side is incoming and the other is outgoing,\n    or else both sides are undirected)\n","title":"Half Edge","type":"object","properties":{"edgeType":{"description":"Label of the edge","type":"string"},"direction":{"description":"Direction of an edge in the graph","title":"Edge direction","type":"string","enum":["Outgoing","Incoming","Undirected"]},"other":{"description":"Id of node at the other end of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"}},"required":["edgeType","direction","other"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Edges","description":"Retrieve all node edges.\n\nThis endpoint's usage, including the structure of the values returned,\nare implementation-specific and subject to change without warning. This\nendpoint is not intended for consumption by automated clients. The information\nreturned by this endpoint is formatted for human consumption and is intended\nto assist the operator[s] of Quine in inspecting specific parts of the internal\nQuine graph state.\n\nFor querying from an automated system, use [one of the language-specific interfaces](https://quine.io/reference/rest-api#/paths/api-v1-query-cypher/post)","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"limit","in":"query","schema":{"type":"integer","format":"int32"},"description":"Maximum number of results to return"},{"name":"direction","in":"query","schema":{"type":"string"},"description":"Edge direction. One of: Incoming, Outgoing, Undirected"},{"name":"other","in":"query","schema":{"type":"string"},"description":"Other edge endpoint"},{"name":"type","in":"query","schema":{"type":"string"},"description":"Edge type"}],"tags":["Debug Node Operations"]}},"/api/v1/debug/{id}/edges/half":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"description":"\nOne \"half\" of an edge. A full logical graph edge exists in a Quine graph if and only if\nthe two nodes at the edge's endpoints contain half edges that:\n\n  * Point to each other\n\n  * Have the same label\n\n  * Have opposite directions (eg. one side is incoming and the other is outgoing,\n    or else both sides are undirected)\n","title":"Half Edge","type":"object","properties":{"edgeType":{"description":"Label of the edge","type":"string"},"direction":{"description":"Direction of an edge in the graph","title":"Edge direction","type":"string","enum":["Outgoing","Incoming","Undirected"]},"other":{"description":"Id of node at the other end of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"}},"required":["edgeType","direction","other"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Half Edges","description":"Retrieve all half edges associated with a node.\n\nThis endpoint's usage, including the structure of the values returned,\nare implementation-specific and subject to change without warning. This\nendpoint is not intended for consumption by automated clients. The information\nreturned by this endpoint is formatted for human consumption and is intended\nto assist the operator[s] of Quine in inspecting specific parts of the internal\nQuine graph state.\n\nFor querying from an automated system, use [one of the language-specific interfaces](https://quine.io/reference/rest-api#/paths/api-v1-query-cypher/post)","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"limit","in":"query","schema":{"type":"integer","format":"int32"},"description":"Maximum number of results to return"},{"name":"direction","in":"query","schema":{"type":"string"},"description":"Edge direction. One of: Incoming, Outgoing, Undirected"},{"name":"other","in":"query","schema":{"type":"string"},"description":"Other edge endpoint"},{"name":"type","in":"query","schema":{"type":"string"},"description":"Edge type"}],"tags":["Debug Node Operations"]}},"/api/v1/debug/{id}/props":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":{"name":"fruits-collection","fruits":["apple","orange","grape"]},"type":"","format":"quine-value"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Get Property","description":"Retrieve a single property from the node; note that values are represented as closely as possible to how they would be emitted by [the cypher query endpoint](https://quine.io/reference/rest-api/#/paths/api-v1-query-cypher/post).\n\nThis endpoint's usage, including the structure of the values returned,\nare implementation-specific and subject to change without warning. This\nendpoint is not intended for consumption by automated clients. The information\nreturned by this endpoint is formatted for human consumption and is intended\nto assist the operator[s] of Quine in inspecting specific parts of the internal\nQuine graph state.\n\nFor querying from an automated system, use [one of the language-specific interfaces](https://quine.io/reference/rest-api#/paths/api-v1-query-cypher/post)","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true},{"name":"key","in":"query","schema":{"type":"string"},"description":"Name of a property","required":true},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"}],"tags":["Debug Node Operations"]}},"/api/v1/debug/{id}/verbose":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":{"name":"fruits-collection","fruits":["apple","orange","grape"]},"type":"","format":"quine-value"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Node State (Verbose)","description":"Returns information relating to the node's internal state.\n\nThis endpoint's usage, including the structure of the values returned,\nare implementation-specific and subject to change without warning. This\nendpoint is not intended for consumption by automated clients. The information\nreturned by this endpoint is formatted for human consumption and is intended\nto assist the operator[s] of Quine in inspecting specific parts of the internal\nQuine graph state.\n\nFor querying from an automated system, use [one of the language-specific interfaces](https://quine.io/reference/rest-api#/paths/api-v1-query-cypher/post)","parameters":[{"name":"id","in":"path","schema":{"type":"string"},"description":"Node id","required":true},{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"}],"tags":["Debug Node Operations"]}},"/api/v1/ingest":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":{"log1-entity-ingest-source":{"status":"Running","settings":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"stats":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000}}},"type":"object","properties":{},"additionalProperties":{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamInfo"}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Ingest Streams","description":"Return a JSON object containing the configured [ingest streams](https://docs.quine.io/components/ingest-sources/ingest-sources.html)\nand their associated stream metrics keyed by the stream name. ","parameters":[],"tags":["Ingest Streams"]}},"/api/v1/ingest/{name}":{"post":{"responses":{"200":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - Ingest stream exists already\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Create Ingest Stream","description":"Create an [ingest stream](https://docs.quine.io/components/ingest-sources/ingest-sources.html)\nthat connects a streaming event source to Quine and loads data into the graph.\n\nAn ingest stream is defined by selecting a source `type`, then an appropriate data `format`,\nand must be created with a unique name. Many ingest stream types allow a Cypher query to operate\non the event stream data to create nodes and relationships in the graph.","parameters":[{"name":"name","in":"path","schema":{"type":"string"},"description":"Unique name for the ingest stream","required":true}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"},"example":"topics:\n- e1-source\nbootstrapServers: localhost:9092\ngroupId: quine-e1-ingester\ntype: KafkaIngest\n"}}},"tags":["Ingest Streams"]},"delete":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"An active stream of data being ingested paired with a name for the stream.","example":{"name":"log1-entity-ingest-source","status":"Running","settings":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"stats":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000}},"title":"Named Ingest Stream","type":"object","properties":{"name":{"description":"Unique name identifying the ingest stream","type":"string"},"status":{"description":"Indicator of whether the ingest is still running, completed, etc.","example":"Running","type":"string","enum":["Running","Paused","Restored","Completed","Terminated","Failed"]},"message":{"description":"Error message about the ingest, if any","type":"string"},"settings":{"description":"Configuration of the ingest stream","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"}]},"stats":{"description":"Statistics on progress of running ingest stream","example":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000},"title":"Statistics About a Running Ingest Stream","type":"object","properties":{"ingestedCount":{"description":"Number of source records (or lines) ingested so far","type":"integer","format":"int64"},"rates":{"description":"Records/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"byteRates":{"description":"Bytes/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"startTime":{"description":"Time (in ISO-8601 UTC time) when the ingestion was started","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"totalRuntime":{"description":"Time (in milliseconds) that that the ingest has been running","type":"integer","format":"int64"}},"required":["ingestedCount","rates","byteRates","startTime","totalRuntime"]}},"required":["name","status","settings","stats"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Delete Ingest Stream","description":"Immediately halt and remove the named ingest stream from Quine.\n\nThe ingest stream will complete any pending operations and return stream information\nonce the operation is complete.","parameters":[{"name":"name","in":"path","schema":{"type":"string"},"description":"Ingest stream name","required":true}],"tags":["Ingest Streams"]},"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"An active stream of data being ingested paired with a name for the stream.","example":{"name":"log1-entity-ingest-source","status":"Running","settings":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"stats":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000}},"title":"Named Ingest Stream","type":"object","properties":{"name":{"description":"Unique name identifying the ingest stream","type":"string"},"status":{"description":"Indicator of whether the ingest is still running, completed, etc.","example":"Running","type":"string","enum":["Running","Paused","Restored","Completed","Terminated","Failed"]},"message":{"description":"Error message about the ingest, if any","type":"string"},"settings":{"description":"Configuration of the ingest stream","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"}]},"stats":{"description":"Statistics on progress of running ingest stream","example":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000},"title":"Statistics About a Running Ingest Stream","type":"object","properties":{"ingestedCount":{"description":"Number of source records (or lines) ingested so far","type":"integer","format":"int64"},"rates":{"description":"Records/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"byteRates":{"description":"Bytes/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"startTime":{"description":"Time (in ISO-8601 UTC time) when the ingestion was started","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"totalRuntime":{"description":"Time (in milliseconds) that that the ingest has been running","type":"integer","format":"int64"}},"required":["ingestedCount","rates","byteRates","startTime","totalRuntime"]}},"required":["name","status","settings","stats"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Ingest Stream Status","description":"Return the ingest stream status information for a configured ingest stream by name.","parameters":[{"name":"name","in":"path","schema":{"type":"string"},"description":"Ingest stream name","required":true}],"tags":["Ingest Streams"]}},"/api/v1/ingest/{name}/pause":{"put":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"An active stream of data being ingested paired with a name for the stream.","example":{"name":"log1-entity-ingest-source","status":"Running","settings":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"stats":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000}},"title":"Named Ingest Stream","type":"object","properties":{"name":{"description":"Unique name identifying the ingest stream","type":"string"},"status":{"description":"Indicator of whether the ingest is still running, completed, etc.","example":"Running","type":"string","enum":["Running","Paused","Restored","Completed","Terminated","Failed"]},"message":{"description":"Error message about the ingest, if any","type":"string"},"settings":{"description":"Configuration of the ingest stream","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"}]},"stats":{"description":"Statistics on progress of running ingest stream","example":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000},"title":"Statistics About a Running Ingest Stream","type":"object","properties":{"ingestedCount":{"description":"Number of source records (or lines) ingested so far","type":"integer","format":"int64"},"rates":{"description":"Records/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"byteRates":{"description":"Bytes/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"startTime":{"description":"Time (in ISO-8601 UTC time) when the ingestion was started","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"totalRuntime":{"description":"Time (in milliseconds) that that the ingest has been running","type":"integer","format":"int64"}},"required":["ingestedCount","rates","byteRates","startTime","totalRuntime"]}},"required":["name","status","settings","stats"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - Cannot pause failed ingest\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Pause Ingest Stream","description":"Temporarily pause processing new events by the named ingest stream.","parameters":[{"name":"name","in":"path","schema":{"type":"string"},"description":"Ingest stream name","required":true}],"tags":["Ingest Streams"]}},"/api/v1/ingest/{name}/start":{"put":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"An active stream of data being ingested paired with a name for the stream.","example":{"name":"log1-entity-ingest-source","status":"Running","settings":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"stats":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000}},"title":"Named Ingest Stream","type":"object","properties":{"name":{"description":"Unique name identifying the ingest stream","type":"string"},"status":{"description":"Indicator of whether the ingest is still running, completed, etc.","example":"Running","type":"string","enum":["Running","Paused","Restored","Completed","Terminated","Failed"]},"message":{"description":"Error message about the ingest, if any","type":"string"},"settings":{"description":"Configuration of the ingest stream","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"}]},"stats":{"description":"Statistics on progress of running ingest stream","example":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000},"title":"Statistics About a Running Ingest Stream","type":"object","properties":{"ingestedCount":{"description":"Number of source records (or lines) ingested so far","type":"integer","format":"int64"},"rates":{"description":"Records/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"byteRates":{"description":"Bytes/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"startTime":{"description":"Time (in ISO-8601 UTC time) when the ingestion was started","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"totalRuntime":{"description":"Time (in milliseconds) that that the ingest has been running","type":"integer","format":"int64"}},"required":["ingestedCount","rates","byteRates","startTime","totalRuntime"]}},"required":["name","status","settings","stats"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - Cannot resume failed ingest\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Unpause Ingest Stream","description":"Resume processing new events by the named ingest stream.","parameters":[{"name":"name","in":"path","schema":{"type":"string"},"description":"Ingest stream name","required":true}],"tags":["Ingest Streams"]}},"/api/v1/query-ui/node-appearances":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":[{"predicate":{"propertyKeys":[],"knownValues":{},"dbLabel":"Person"},"icon":"","label":{"key":"name","type":"Property"}},{"predicate":{"propertyKeys":[],"knownValues":{},"dbLabel":"File"},"icon":"","label":{"key":"path","prefix":"File path: ","type":"Property"}}],"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.UiNodeAppearance"}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Node Appearances","description":"When rendering a node in the UI, a node's style is decided by picking the first style in this list whose `predicate` matches the node.","tags":["UI Styling"]},"put":{"responses":{"204":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Replace Node Appearances","description":"For a list of icon names, refer to [this page](https://ionicons.com/v2/cheatsheet.html)","requestBody":{"required":true,"content":{"application/json":{"schema":{"example":[{"predicate":{"propertyKeys":[],"knownValues":{},"dbLabel":"Person"},"icon":"","label":{"key":"name","type":"Property"}},{"predicate":{"propertyKeys":[],"knownValues":{},"dbLabel":"File"},"icon":"","label":{"key":"path","prefix":"File path: ","type":"Property"}}],"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.UiNodeAppearance"}}},"application/yaml":{"schema":{"example":[{"predicate":{"propertyKeys":[],"knownValues":{},"dbLabel":"Person"},"icon":"","label":{"key":"name","type":"Property"}},{"predicate":{"propertyKeys":[],"knownValues":{},"dbLabel":"File"},"icon":"","label":{"key":"path","prefix":"File path: ","type":"Property"}}],"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.UiNodeAppearance"}},"example":"- predicate:\n    propertyKeys: []\n    knownValues: {}\n    dbLabel: Person\n  icon: \n  label:\n    key: name\n    type: Property\n- predicate:\n    propertyKeys: []\n    knownValues: {}\n    dbLabel: File\n  icon: \n  label:\n    key: path\n    prefix: 'File path: '\n    type: Property\n"}}},"tags":["UI Styling"]}},"/api/v1/query-ui/quick-queries":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":[{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Adjacent Nodes","querySuffix":"MATCH (n)--(m) RETURN DISTINCT m","queryLanguage":"Cypher","sort":"Node"}},{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Refresh","querySuffix":"RETURN n","queryLanguage":"Cypher","sort":"Node"}},{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Local Properties","querySuffix":"RETURN id(n), properties(n)","queryLanguage":"Cypher","sort":"Text"}}],"type":"array","items":{"description":"A query that can show up in the context menu brought up by right-clicking a node","title":"Quick Query","type":"object","properties":{"predicate":{"description":"Condition that a node must satisfy for this query to be in the context menu","title":"UI Node Predicate","type":"object","properties":{"propertyKeys":{"description":"Properties the node must have to apply this style","type":"array","items":{"type":"string"}},"knownValues":{"description":"Properties with known constant values the node must have to apply this style","type":"object","properties":{},"additionalProperties":{"type":""}},"dbLabel":{"description":"Label the node must have to apply this style","type":"string"}},"required":["propertyKeys","knownValues"]},"quickQuery":{"description":"Query to run when the context menu entry is selected","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.QuickQuery"}]}},"required":["predicate","quickQuery"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Quick Queries","description":"Quick queries are queries that appear when right-clicking\na node in the UI.\nNodes will only display quick queries that satisfy any\nprovided predicates.","tags":["UI Styling"]},"put":{"responses":{"204":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Replace Quick Queries","description":"Quick queries are queries that appear when right-clicking\na node in the UI.\nQueries applied here will replace any currently existing quick queries.\n","requestBody":{"required":true,"content":{"application/json":{"schema":{"example":[{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Adjacent Nodes","querySuffix":"MATCH (n)--(m) RETURN DISTINCT m","queryLanguage":"Cypher","sort":"Node"}},{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Refresh","querySuffix":"RETURN n","queryLanguage":"Cypher","sort":"Node"}},{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Local Properties","querySuffix":"RETURN id(n), properties(n)","queryLanguage":"Cypher","sort":"Text"}}],"type":"array","items":{"description":"A query that can show up in the context menu brought up by right-clicking a node","title":"Quick Query","type":"object","properties":{"predicate":{"description":"Condition that a node must satisfy for this query to be in the context menu","title":"UI Node Predicate","type":"object","properties":{"propertyKeys":{"description":"Properties the node must have to apply this style","type":"array","items":{"type":"string"}},"knownValues":{"description":"Properties with known constant values the node must have to apply this style","type":"object","properties":{},"additionalProperties":{"type":""}},"dbLabel":{"description":"Label the node must have to apply this style","type":"string"}},"required":["propertyKeys","knownValues"]},"quickQuery":{"description":"Query to run when the context menu entry is selected","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.QuickQuery"}]}},"required":["predicate","quickQuery"]}}},"application/yaml":{"schema":{"example":[{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Adjacent Nodes","querySuffix":"MATCH (n)--(m) RETURN DISTINCT m","queryLanguage":"Cypher","sort":"Node"}},{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Refresh","querySuffix":"RETURN n","queryLanguage":"Cypher","sort":"Node"}},{"predicate":{"propertyKeys":[],"knownValues":{}},"quickQuery":{"name":"Local Properties","querySuffix":"RETURN id(n), properties(n)","queryLanguage":"Cypher","sort":"Text"}}],"type":"array","items":{"description":"A query that can show up in the context menu brought up by right-clicking a node","title":"Quick Query","type":"object","properties":{"predicate":{"description":"Condition that a node must satisfy for this query to be in the context menu","title":"UI Node Predicate","type":"object","properties":{"propertyKeys":{"description":"Properties the node must have to apply this style","type":"array","items":{"type":"string"}},"knownValues":{"description":"Properties with known constant values the node must have to apply this style","type":"object","properties":{},"additionalProperties":{"type":""}},"dbLabel":{"description":"Label the node must have to apply this style","type":"string"}},"required":["propertyKeys","knownValues"]},"quickQuery":{"description":"Query to run when the context menu entry is selected","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.QuickQuery"}]}},"required":["predicate","quickQuery"]}},"example":"- predicate:\n    propertyKeys: []\n    knownValues: {}\n  quickQuery:\n    name: Adjacent Nodes\n    querySuffix: MATCH (n)--(m) RETURN DISTINCT m\n    queryLanguage: Cypher\n    sort: Node\n- predicate:\n    propertyKeys: []\n    knownValues: {}\n  quickQuery:\n    name: Refresh\n    querySuffix: RETURN n\n    queryLanguage: Cypher\n    sort: Node\n- predicate:\n    propertyKeys: []\n    knownValues: {}\n  quickQuery:\n    name: Local Properties\n    querySuffix: RETURN id(n), properties(n)\n    queryLanguage: Cypher\n    sort: Text\n"}}},"tags":["UI Styling"]}},"/api/v1/query-ui/sample-queries":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":[{"name":"Get a few recent nodes","query":"CALL recentNodes(10)"},{"name":"Get nodes by their ID(s)","query":"MATCH (n) WHERE id(n) = idFrom(0) RETURN n"}],"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.SampleQuery"}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Sample Queries","description":"Queries provided here will be available via a drop-down menu from the Quine UI search bar.","tags":["UI Styling"]},"put":{"responses":{"204":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Replace Sample Queries","description":"Queries provided here will be available via a drop-down menu from the Quine UI search bar.\n\nQueries applied here will replace any currently existing sample queries.","requestBody":{"required":true,"content":{"application/json":{"schema":{"example":[{"name":"Get a few recent nodes","query":"CALL recentNodes(10)"},{"name":"Get nodes by their ID(s)","query":"MATCH (n) WHERE id(n) = idFrom(0) RETURN n"}],"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.SampleQuery"}}},"application/yaml":{"schema":{"example":[{"name":"Get a few recent nodes","query":"CALL recentNodes(10)"},{"name":"Get nodes by their ID(s)","query":"MATCH (n) WHERE id(n) = idFrom(0) RETURN n"}],"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.SampleQuery"}},"example":"- name: Get a few recent nodes\n  query: CALL recentNodes(10)\n- name: Get nodes by their ID(s)\n  query: MATCH (n) WHERE id(n) = idFrom(0) RETURN n\n"}}},"tags":["UI Styling"]}},"/api/v1/query/cypher":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"description":"Cypher queries are designed to return data in a table format. This gets\nencoded into JSON with `columns` as the header row and each element in `results`\nbeing another row of results. As a consequence Consequently, every array element\nin `results` will have the same length, and all will have the same length as the\n`columns` array.\n","example":{"columns":["three"],"results":[[3]]},"title":"Cypher Query Result","type":"object","properties":{"columns":{"description":"Return values of the Cypher query","type":"array","items":{"type":"string"}},"results":{"description":"Rows of results","type":"array","items":{"type":"array","items":{"type":"","format":"cypher-value"}}}},"required":["columns","results"]}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - runtime error in the query\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Cypher Query","description":"Execute an arbitrary [Cypher](https://s3.amazonaws.com/artifacts.opencypher.org/openCypher9.pdf) query","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"timeout","in":"query","schema":{"type":"integer","format":"int64"},"description":"Milliseconds to wait before the HTTP request times out"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.CypherQuery"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.CypherQuery"},"example":"text: RETURN $x+$y AS three\nparameters:\n  x: 1\n  y: 2\n"},"text/plain":{"schema":{"example":"RETURN 1 + 2 AS three","type":"string"}}}},"tags":["Cypher Query Language"]}},"/api/v1/query/cypher/edges":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"description":"Information needed by the Query UI to display an edge in the graph.","example":{"from":"5c017004-fe6c-453d-9a6b-30c212ca7f79","edgeType":"likes","to":"ee3569e2-f491-48c9-b255-ce5ea1ac373a"},"title":"Graph Edge","type":"object","properties":{"from":{"description":"Node at the start of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"},"edgeType":{"description":"Name of the edge","type":"string"},"to":{"description":"Node at the end of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"},"isDirected":{"description":"Whether the edge is directed or undirected","default":true,"type":"boolean"}},"required":["from","edgeType","to"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - runtime error in the query\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Cypher Query Return Edges","description":"Execute a [Cypher](https://s3.amazonaws.com/artifacts.opencypher.org/openCypher9.pdf) query that returns edges.\nQueries that do not return edges will fail with a type error.","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"timeout","in":"query","schema":{"type":"integer","format":"int64"},"description":"Milliseconds to wait before the HTTP request times out"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.CypherQuery"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.CypherQuery"},"example":"text: MATCH ()-[e]->() RETURN e LIMIT $lim\nparameters:\n  lim: 1\n"},"text/plain":{"schema":{"example":"MATCH ()-[e]->() RETURN e LIMIT 1","type":"string"}}}},"tags":["Cypher Query Language"]}},"/api/v1/query/cypher/nodes":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"description":"Information needed by the Query UI to display a node in the graph.","example":{"id":"d82ed775-7d4e-4d26-819f-1d15a0b7b702","hostIndex":0,"label":"Harry","properties":{"first_name":"Harry","last_name":"Potter","birth_year":1980}},"title":"Graph Node","type":"object","properties":{"id":{"description":"node id","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"},"hostIndex":{"description":"index of the cluster host responsible for this node","type":"integer","format":"int32"},"label":{"description":"categorical classification","type":"string"},"properties":{"description":"properties on the node","type":"object","properties":{},"additionalProperties":{"type":""}}},"required":["id","hostIndex","label","properties"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - runtime error in the query\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Cypher Query Return Nodes","description":"Execute a [Cypher](https://s3.amazonaws.com/artifacts.opencypher.org/openCypher9.pdf) query that returns nodes.\nQueries that do not return nodes will fail with a type error.","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"timeout","in":"query","schema":{"type":"integer","format":"int64"},"description":"Milliseconds to wait before the HTTP request times out"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.CypherQuery"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.CypherQuery"},"example":"text: MATCH (n) RETURN n LIMIT $lim\nparameters:\n  lim: 1\n"},"text/plain":{"schema":{"example":"MATCH (n) RETURN n LIMIT 1","type":"string"}}}},"tags":["Cypher Query Language"]}},"/api/v1/query/gremlin":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"example":[{"first_name":"Harry","last_name":"Potter","birth_year":1980}],"type":"array","items":{"type":"","format":"gremlin JSON"}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - runtime error in the query\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Gremlin Query","description":"Execute a [Gremlin](https://tinkerpop.apache.org/gremlin.html) query. Note that we only support a simple subset of Gremlin.","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"timeout","in":"query","schema":{"type":"integer","format":"int64"},"description":"Milliseconds to wait before the HTTP request times out"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.GremlinQuery"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.GremlinQuery"},"example":"text: g.V().valueMap().limit(lim)\nparameters:\n  lim: 1\n"},"text/plain":{"schema":{"example":"g.V().valueMap().limit(1)","type":"string"}}}},"tags":["Gremlin Query Language"]}},"/api/v1/query/gremlin/edges":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"description":"Information needed by the Query UI to display an edge in the graph.","example":{"from":"5c017004-fe6c-453d-9a6b-30c212ca7f79","edgeType":"likes","to":"ee3569e2-f491-48c9-b255-ce5ea1ac373a"},"title":"Graph Edge","type":"object","properties":{"from":{"description":"Node at the start of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"},"edgeType":{"description":"Name of the edge","type":"string"},"to":{"description":"Node at the end of the edge","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"},"isDirected":{"description":"Whether the edge is directed or undirected","default":true,"type":"boolean"}},"required":["from","edgeType","to"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - runtime error in the query\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Gremlin Query Return Edges","description":"Execute a [Gremlin](https://tinkerpop.apache.org/gremlin.html) query that returns edges.\nQueries that do not return edges will fail with a type error.","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"timeout","in":"query","schema":{"type":"integer","format":"int64"},"description":"Milliseconds to wait before the HTTP request times out"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.GremlinQuery"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.GremlinQuery"},"example":"text: g.V().outE().limit(lim)\nparameters:\n  lim: 1\n"},"text/plain":{"schema":{"example":"g.V().outE().limit(1)","type":"string"}}}},"tags":["Gremlin Query Language"]}},"/api/v1/query/gremlin/nodes":{"post":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"description":"Information needed by the Query UI to display a node in the graph.","example":{"id":"d82ed775-7d4e-4d26-819f-1d15a0b7b702","hostIndex":0,"label":"Harry","properties":{"first_name":"Harry","last_name":"Potter","birth_year":1980}},"title":"Graph Node","type":"object","properties":{"id":{"description":"node id","example":"eeb2ba94-e415-4ce4-b728-96e04fc9169f","type":"string","format":"node-id"},"hostIndex":{"description":"index of the cluster host responsible for this node","type":"integer","format":"int32"},"label":{"description":"categorical classification","type":"string"},"properties":{"description":"properties on the node","type":"object","properties":{},"additionalProperties":{"type":""}}},"required":["id","hostIndex","label","properties"]}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - runtime error in the query\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Gremlin Query Return Nodes","description":"Execute a [Gremlin](https://tinkerpop.apache.org/gremlin.html) query that returns nodes.\nQueries that do not return nodes will fail with a type error.","parameters":[{"name":"at-time","in":"query","schema":{"type":"integer","format":"int64"},"description":"An integer timestamp in milliseconds since the Unix epoch representing the historical moment to query"},{"name":"timeout","in":"query","schema":{"type":"integer","format":"int64"},"description":"Milliseconds to wait before the HTTP request times out"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.GremlinQuery"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.GremlinQuery"},"example":"text: g.V().limit(lim)\nparameters:\n  lim: 1\n"},"text/plain":{"schema":{"example":"g.V().limit(1)","type":"string"}}}},"tags":["Gremlin Query Language"]}},"/api/v1/query/standing":{"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/com.thatdot.quine.routes.RegisteredStandingQuery"}}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"List Standing Queries","description":"Return a JSON array containing the configured\n[standing queries](https://docs.quine.io/components/writing-standing-queries.html)\nand their associated metrics keyed by standing query name. ","parameters":[],"tags":["Standing Queries"]}},"/api/v1/query/standing/control/propagate":{"post":{"responses":{"202":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":"Namespace not found"},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Propagate Standing Queries","description":"When a new standing query is registered in the system, it gets automatically\nregistered on new nodes (or old nodes that are loaded back into the cache). This\nbehavior is the default because pro-actively setting the standing query on all\nexisting data might be quite costly depending on how much historical data there is.\n\nHowever, sometimes there is a legitimate use-case for eagerly propagating standing\nqueries across the graph, for instance:\n\n  * When interactively constructing a standing query for already-ingested data\n  * When creating a new standing query that needs to be applied to recent data\n","parameters":[{"name":"include-sleeping","in":"query","schema":{"type":"boolean"},"description":"Propagate to all sleeping nodes. Setting to `true` can be costly if there is lot of\ndata. Default is false.\n"},{"name":"wake-up-parallelism","in":"query","schema":{"type":"integer","format":"int32"},"description":"In the case of `include-sleeping = true`, this controls the parallelism for how many\nnodes to propagate to at once. Default is 4.\n"}],"tags":["Standing Queries"]}},"/api/v1/query/standing/{standing-query-name}":{"post":{"responses":{"201":{"description":""},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  Possible errors:\n - Standing query exists already\n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Create Standing Query","description":"Individual standing queries are issued into the graph one time;\nresult outputs are produced as new data is written into Quine and matches are found.\n\nCompared to traditional queries, standing queries are less imperative\nand more declarative - it doesn't matter what order parts of the pattern match,\nonly that the composite structure exists.\n\nLearn more about writing\n[standing queries](https://docs.quine.io/components/writing-standing-queries.html)\nin the docs.","parameters":[{"name":"standing-query-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query","required":true}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryDefinition"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryDefinition"},"example":"pattern:\n  query: MATCH (n)-[:has_father]->(m) WHERE n.name IS NOT NULL AND m.name IS NOT NULL\n    RETURN DISTINCT strId(n) AS kidWithDad\n  type: Cypher\noutputs:\n  endpoint:\n    url: http://myendpoint\n    type: PostToEndpoint\n  stdout:\n    type: PrintToStandardOut\nincludeCancellations: true\nshouldCalculateResultHashCode: true\n"}}},"tags":["Standing Queries"]},"delete":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.RegisteredStandingQuery"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Delete Standing Query","description":"Immediately halt and remove the named standing query from Quine.","parameters":[{"name":"standing-query-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query","required":true}],"tags":["Standing Queries"]},"get":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/com.thatdot.quine.routes.RegisteredStandingQuery"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Standing Query Status","description":"Return the status information for a configured standing query by name.","parameters":[{"name":"standing-query-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query","required":true}],"tags":["Standing Queries"]}},"/api/v1/query/standing/{standing-query-name}/output/{standing-query-output-name}":{"post":{"responses":{"201":{"description":""},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Create Standing Query Output","description":"Each standing query can have any number of destinations to which `StandingQueryResults` will be routed.","parameters":[{"name":"standing-query-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query","required":true},{"name":"standing-query-output-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query output","required":true}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Standing Query Result Output"}},"application/yaml":{"schema":{"$ref":"#/components/schemas/Standing Query Result Output"},"example":"logMode: FastSampling\ntype: PrintToStandardOut\n"}}},"tags":["Standing Queries"]},"delete":{"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Standing Query Result Output"}}}},"400":{"description":"Bad Request\n\n  Something in your request is invalid, and Quine could not process it.\n  Review your request and attempt to submit it again.\n\n  \n\n  Contact support if you continue to have issues.\n  ","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}},"404":{"description":""},"500":{"description":"Internal Server Error\n\nQuine encountered an unexpected condition that prevented processing your request.\n\n  \n\n  Contact support if you continue to have issues.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/endpoints.Errors"}}}}},"summary":"Delete Standing Query Output","description":"Remove an output from a standing query.","parameters":[{"name":"standing-query-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query","required":true},{"name":"standing-query-output-name","in":"path","schema":{"type":"string"},"description":"Unique name for a standing query output","required":true}],"tags":["Standing Queries"]}}},"servers":[{"url":"http://127.0.0.1:9500"}],"tags":[{"name":"UI Styling","description":"Operations for customizing parts of the Query UI. These options are generally useful\nfor tailoring the UI to a particular domain or data model (eg. to customize the\nicon, color, size, context-menu queries, etc. for nodes based on their contents).\n"},{"name":"Administration","description":"Operations related to the management and configuration of the system"},{"name":"Debug Node Operations","description":"Operations that are lower level and involve sending requests to individual nodes in the graph."},{"name":"Ingest Streams","description":"Sources of streaming data ingested into the graph interpreter."},{"name":"Graph Algorithms","description":"High-level operations on the graph to support graph AI, ML, and other algorithms."},{"name":"Standing Queries","description":"Live queries that automatically propagate through streaming data and instantly\nreturn results.\n"}],"components":{"schemas":{"Standing Query Result Output":{"description":"A destination to which StandingQueryResults should be routed.\n\nA StandingQueryResult is an object with 2 sub-objects: `meta` and `data`. The `meta` object consists of:\n - a boolean `isPositiveMatch`\n\nOn a positive match, the `data` object consists of the data returned by the Standing Query.\n\nFor example, a StandingQueryResult may look like the following:\n\n```\n{\"meta\": {\"isPositiveMatch\": true}, \"data\": {\"strId(n)\": \"a0f93a88-ecc8-4bd5-b9ba-faa6e9c5f95d\"}}\n```\n\nWhile a cancellation of that result might look like the following:\n\n```\n{\"meta\": {\"isPositiveMatch\": false}, \"data\": {}}\n```\n","example":{"query":"MATCH (n) WHERE id(n) = $that.data.id SET n.flagged = true","type":"CypherQuery"},"title":"Standing Query Result Output","oneOf":[{"description":"For each result, assigns the result as `parameter` and runs `query`, running at most `parallelism` queries simultaneously.","title":"Run Cypher Query","type":"object","properties":{"type":{"example":"CypherQuery","type":"string","enum":["CypherQuery"]},"query":{"description":"Cypher query to execute on standing query result","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the standing query result","default":"that","type":"string"},"parallelism":{"description":"maximum number of standing query results being processed at once","default":16,"type":"integer","format":"int32"},"andThen":{"description":"Send the result of the Cypher query to another standing query output (in order to provide chained transformation and actions). The data returned by this query will be passed as the `data` object of the new StandingQueryResult (see \\\"Standing Query Result Output\\\")","anyOf":[{"$ref":"#/components/schemas/Standing Query Result Output"}]},"allowAllNodeScan":{"description":"To prevent unintentional resource use, if the Cypher query possibly contains an all node scan, then this parameter must be true","default":false,"type":"boolean"},"shouldRetry":{"description":"Whether queries that raise a potentially-recoverable error should be retried. If set to true (the default), such errors will be retried until they succeed. Additionally, if the query is not idempotent, the query's effects may occur multiple times in the case of external system failure. Query idempotency can be checked with the EXPLAIN keyword. If set to false, results and effects will not be duplicated, but may be dropped in the case of external system failure","default":true,"type":"boolean"},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type","query"]},{"title":"Drop","type":"object","properties":{"type":{"example":"Drop","type":"string","enum":["Drop"]}},"required":["type"]},{"title":"Internal Queue","type":"object","properties":{"type":{"example":"InternalQueue","type":"string","enum":["InternalQueue"]},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type"]},{"description":"Makes an HTTP[S] POST for each result. For the format of the result, see \"Standing Query Result Output\".","title":"POST to HTTP[S] Webhook","type":"object","properties":{"type":{"example":"PostToEndpoint","type":"string","enum":["PostToEndpoint"]},"url":{"type":"string"},"parallelism":{"default":8,"type":"integer","format":"int32"},"onlyPositiveMatchData":{"default":false,"type":"boolean"},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type","url"]},{"description":"Sends a message to Slack via a configured webhook URL. See <https://api.slack.com/messaging/webhooks>.","title":"Publish to Slack Webhook","type":"object","properties":{"type":{"example":"PostToSlack","type":"string","enum":["PostToSlack"]},"hookUrl":{"type":"string"},"onlyPositiveMatchData":{"default":false,"type":"boolean"},"intervalSeconds":{"description":"Number of seconds to wait between messages; minimum 1","default":20,"type":"integer","format":"int32"}},"required":["type","hookUrl"]},{"description":"Prints each result as a single-line JSON object to stdout on the Quine server.","title":"Log JSON to Console","type":"object","properties":{"type":{"example":"PrintToStandardOut","type":"string","enum":["PrintToStandardOut"]},"logLevel":{"default":"Info","type":"string","enum":["Trace","Debug","Info","Warn","Error"]},"logMode":{"description":"Mode used to log Standing Query results. `Complete` is the\ndefault and logs all matches found, slowing down result processing\nso that every result can be logged. `FastSampling` may skip logging some\nmatches when there are too many to keep up with, but never slows down\nthe stream of results. Use `FastSampling` if you don't need every result\nto be logged. Note that neither option changes the behavior of other\nStandingQueryResultOutputs registered on the same standing query.","default":"Complete","type":"string","enum":["Complete","FastSampling"]},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type"]},{"description":"Writes each result as a single-line JSON record. For the format of the result, see \"Standing Query Result Output\".","title":"Log JSON to File","type":"object","properties":{"type":{"example":"WriteToFile","type":"string","enum":["WriteToFile"]},"path":{"type":"string"},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type","path"]},{"description":"Publishes a JSON record for each result to the provided Apache Kafka topic. For the format of the result record, see \"Standing Query Result Output\".","title":"Publish to Kafka Topic","type":"object","properties":{"type":{"example":"WriteToKafka","type":"string","enum":["WriteToKafka"]},"topic":{"type":"string"},"bootstrapServers":{"type":"string"},"format":{"example":{"type":"JSON"},"title":"Standing Query Result Output Format","default":{"type":"JSON"},"oneOf":[{"title":"JSON","type":"object","properties":{"type":{"example":"JSON","type":"string","enum":["JSON"]}},"required":["type"]},{"title":"Protobuf","type":"object","properties":{"type":{"example":"Protobuf","type":"string","enum":["Protobuf"]},"schemaUrl":{"description":"URL (or local filename) of the Protobuf .desc file to load that contains the desired typeName to serialize to","type":"string"},"typeName":{"description":"message type name to use (from the given .desc file) as the message type","type":"string"}},"required":["type","schemaUrl","typeName"]}],"discriminator":{"propertyName":"type"}},"kafkaProperties":{"description":"Map of Kafka producer properties. See <https://docs.confluent.io/platform/current/installation/configuration/producer-configs.html>","default":{},"type":"object","properties":{},"additionalProperties":{"type":"string"}},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type","topic","bootstrapServers"]},{"description":"Publishes a JSON record for each result to the provided Kinesis stream. For the format of the result record, see \"StandingQueryResult\".","title":"Publish to Kinesis Data Stream","type":"object","properties":{"type":{"example":"WriteToKinesis","type":"string","enum":["WriteToKinesis"]},"credentials":{"description":"Explicit AWS access key and secret to use. If not provided, defaults to environmental credentials according to the default AWS credential chain. See: <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>.","title":"AWS Credentials","type":"object","properties":{"accessKeyId":{"type":"string"},"secretAccessKey":{"type":"string"}},"required":["accessKeyId","secretAccessKey"]},"region":{"description":"AWS region code. e.g. `us-west-2`. If not provided, defaults according to the default AWS region provider chain. See: <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html#automatically-determine-the-aws-region-from-the-environment>.","title":"AWS Region","type":"object","properties":{"region":{"type":"string"}},"required":["region"]},"streamName":{"type":"string"},"format":{"example":{"type":"JSON"},"title":"Standing Query Result Output Format","default":{"type":"JSON"},"oneOf":[{"title":"JSON","type":"object","properties":{"type":{"example":"JSON","type":"string","enum":["JSON"]}},"required":["type"]},{"title":"Protobuf","type":"object","properties":{"type":{"example":"Protobuf","type":"string","enum":["Protobuf"]},"schemaUrl":{"description":"URL (or local filename) of the Protobuf .desc file to load that contains the desired typeName to serialize to","type":"string"},"typeName":{"description":"message type name to use (from the given .desc file) as the message type","type":"string"}},"required":["type","schemaUrl","typeName"]}],"discriminator":{"propertyName":"type"}},"kinesisParallelism":{"type":"integer","format":"int32"},"kinesisMaxBatchSize":{"type":"integer","format":"int32"},"kinesisMaxRecordsPerSecond":{"type":"integer","format":"int32"},"kinesisMaxBytesPerSecond":{"type":"integer","format":"int32"},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type","streamName"]},{"description":"Publishes an AWS SNS record to the provided topic containing JSON for each result.\nFor the format of the result, see \"Standing Query Result Output\".\n\n**Double check your credentials and topic ARN.** If writing to SNS fails, the write will\nbe retried indefinitely. If the error is unfixable (eg, the topic or credentials\ncannot be found), the outputs will never be emitted and the Standing Query this output\nis attached to may stop running.","title":"Publish to SNS Topic","type":"object","properties":{"type":{"example":"WriteToSNS","type":"string","enum":["WriteToSNS"]},"credentials":{"description":"Explicit AWS access key and secret to use. If not provided, defaults to environmental credentials according to the default AWS credential chain. See: <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>.","title":"AWS Credentials","type":"object","properties":{"accessKeyId":{"type":"string"},"secretAccessKey":{"type":"string"}},"required":["accessKeyId","secretAccessKey"]},"region":{"description":"AWS region code. e.g. `us-west-2`. If not provided, defaults according to the default AWS region provider chain. See: <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html#automatically-determine-the-aws-region-from-the-environment>.","title":"AWS Region","type":"object","properties":{"region":{"type":"string"}},"required":["region"]},"topic":{"description":"ARN of the topic to publish to","type":"string"},"structure":{"description":"Whether the output should contain the metadata. If bare, the result will be returned as is, but if set to include metadata, the output will be wrapped in an objectwith a field for the metadata and a field for the data itself.Warning: if `Bare` with `includeCancellations=true` then there will be no way to determine the difference between positive and negative matches\"","default":{"type":"WithMetadata"},"anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.StandingQueryOutputStructure"}]}},"required":["type","topic"]}],"discriminator":{"propertyName":"type"}},"com.thatdot.quine.routes.CypherQuery":{"example":{"text":"MATCH ()-[e]->() RETURN e LIMIT $lim","parameters":{"lim":1}},"title":"Cypher Query","type":"object","properties":{"text":{"description":"Text of the query to execute","type":"string"},"parameters":{"description":"Parameters the query expects, if any","default":{},"type":"object","properties":{},"additionalProperties":{"type":"","format":"cypher-value"}}},"required":["text"]},"com.thatdot.quine.routes.GremlinQuery":{"example":{"text":"g.V().outE().limit(lim)","parameters":{"lim":1}},"title":"Gremlin Query","type":"object","properties":{"text":{"description":"Text of the query to execute","type":"string"},"parameters":{"description":"Parameters the query expects, if any","default":{},"type":"object","properties":{},"additionalProperties":{"type":"","format":"gremlin-value"}}},"required":["text"]},"com.thatdot.quine.routes.IngestStreamConfiguration":{"description":"A specification of a data source and rules for consuming data from that source.","example":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"title":"Ingest Stream Configuration","oneOf":[{"description":"An active stream of data being ingested from a file on this Quine host.","title":"File Ingest Stream","type":"object","properties":{"type":{"example":"FileIngest","type":"string","enum":["FileIngest"]},"format":{"description":"Format by which a file will be interpreted as a stream of elements for ingest.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"File Ingest Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"For every row in a CSV file, the given Cypher query will be re-executed with the parameter in the query set to the parsed row. Rows are parsed into either a Cypher List of strings or a Map, depending on whether a `headers` row is available.","title":"CypherCSV","type":"object","properties":{"type":{"example":"CypherCsv","type":"string","enum":["CypherCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"Lines in the file should be JSON values. For every value received, the given Cypher query will be re-executed with the parameter in the query set equal to the new JSON value.   ","title":"CypherJson","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"For every line (LF/CRLF delimited) in the source, the given Cypher query will be re-executed with the parameter in the query set equal to a string matching the new line value. The newline is not included in this string.   ","title":"CypherLine","type":"object","properties":{"type":{"example":"CypherLine","type":"string","enum":["CypherLine"]},"query":{"description":"Cypher query to execute on each line","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]},{"description":"blah blah blah","title":"QuinePatternCSV","type":"object","properties":{"type":{"example":"QuinePatternCsv","type":"string","enum":["QuinePatternCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"TODO Add some docs here   ","title":"CypherJson","type":"object","properties":{"type":{"example":"QuinePatternJson","type":"string","enum":["QuinePatternJson"]},"query":{"description":"QuinePAttern query to execute on each record","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"TODO add some docs here  ","title":"QuinePatternLine","type":"object","properties":{"type":{"example":"QuinePatternLine","type":"string","enum":["QuinePatternLine"]},"query":{"description":"QuinePattern query to execute on each line","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]}],"discriminator":{"propertyName":"type"}},"path":{"description":"Local file path.","type":"string"},"encoding":{"description":"The text encoding scheme for the file. UTF-8, US-ASCII and ISO-8859-1 are supported -- other encodings will transcoded to UTF-8 on the fly (and ingest may be slower).","default":"UTF-8","type":"string"},"parallelism":{"description":"Maximum number of records to process at once.","default":16,"type":"integer","format":"int32"},"maximumLineSize":{"description":"Maximum size (in bytes) of any line in the file.","default":134217728,"type":"integer","format":"int32"},"startAtOffset":{"description":"Begin processing at the record with the given index. Useful for skipping some number of lines (e.g. CSV headers) or\nresuming ingest from a partially consumed file.","default":0,"type":"integer","format":"int64"},"ingestLimit":{"description":"Optionally limit how many records are ingested from this file.","type":"integer","format":"int64"},"maximumPerSecond":{"description":"Maximum number of records to process per second.","type":"integer","format":"int32"},"fileIngestMode":{"description":"Ingest mode for reading from a non-regular file type; default is to auto-detect if file is named pipe.","type":"string","enum":["Regular","NamedPipe"]}},"required":["type","path"]},{"description":"A stream of data being ingested from Kafka.","title":"Kafka Ingest Stream","type":"object","properties":{"type":{"example":"KafkaIngest","type":"string","enum":["KafkaIngest"]},"format":{"description":"The format used to decode each Kafka record.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"Streamed Record Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"Records are JSON values. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new JSON value.\n  ","title":"JSON via Cypher","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the JSON value.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Records are serialized instances of `typeName` as described in the schema (a `.desc` descriptor file) at `schemaUrl`. For every record received, the given Cypher query will be re-executed with the parameter in the query set equal to the new (deserialized) Protobuf message.","title":"Protobuf via Cypher","type":"object","properties":{"type":{"example":"CypherProtobuf","type":"string","enum":["CypherProtobuf"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the Protobuf message.","default":"that","type":"string"},"schemaUrl":{"description":"URL (or local filename) of the Protobuf `.desc` file to load to parse the `typeName`.","type":"string"},"typeName":{"description":"Message type name to use from the given `.desc` file as the incoming message type.","type":"string"}},"required":["type","query","schemaUrl","typeName"]},{"description":"Records may have any format. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new value as a Cypher byte array.\n  ","title":"Raw Bytes via Cypher","type":"object","properties":{"type":{"example":"CypherRaw","type":"string","enum":["CypherRaw"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the byte array.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Ignore the data without further processing.","title":"Drop","type":"object","properties":{"type":{"example":"Drop","type":"string","enum":["Drop"]}},"required":["type"]},{"$ref":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}],"discriminator":{"propertyName":"type","mapping":{"QuinePatternJson":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}}},"topics":{"description":"Kafka topics from which to ingest: Either an array of topic names, or an object whose keys are topic names and whose values are partition indices.","oneOf":[{"type":"array","items":{"type":"string"}},{"type":"object","properties":{},"additionalProperties":{"type":"array","items":{"type":"integer","format":"int32"}}}]},"parallelism":{"description":"Maximum number of records to process at once.","default":16,"type":"integer","format":"int32"},"bootstrapServers":{"description":"A comma-separated list of Kafka broker servers.","type":"string"},"groupId":{"description":"Consumer group ID that this ingest stream should report belonging to; defaults to the name of the ingest stream.","type":"string"},"securityProtocol":{"default":"PLAINTEXT","type":"string","enum":["PLAINTEXT","SSL","SASL_SSL","SASL_PLAINTEXT"]},"offsetCommitting":{"description":"How to keep track of current offset when consuming from Kafka, if at all. You could alternatively set \"enable.auto.commit\": \"true\" in kafkaProperties  for this ingest, but in that case messages will be lost if the ingest is stopped while processing messages","title":"Kafka offset tracking mechanism","oneOf":[{"description":"Commit offsets to the specified Kafka consumer group on successful execution of the ingest query for that record.","title":"Explicit Commit","type":"object","properties":{"type":{"example":"ExplicitCommit","type":"string","enum":["ExplicitCommit"]},"maxBatch":{"description":"Maximum number of messages in a single commit batch.","default":1000,"type":"integer","format":"int64"},"maxIntervalMillis":{"description":"Maximum interval between commits in milliseconds.","default":10000,"type":"integer","format":"int32"},"parallelism":{"description":"Parallelism for async committing.","default":100,"type":"integer","format":"int32"},"waitForCommitConfirmation":{"description":"Wait for a confirmation from Kafka on ack.","default":true,"type":"boolean"}},"required":["type"]}],"discriminator":{"propertyName":"type"}},"autoOffsetReset":{"default":"latest","type":"string","enum":["latest","earliest","none"]},"kafkaProperties":{"description":"Map of Kafka client properties. See <https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html#ak-consumer-configurations-for-cp>","default":{},"type":"object","properties":{},"additionalProperties":{"type":"string"}},"endingOffset":{"description":"The offset at which this stream should complete; offsets are sequential integers starting at 0.","type":"integer","format":"int64"},"maximumPerSecond":{"description":"Maximum records to process per second.","type":"integer","format":"int32"},"recordDecoders":{"description":"List of decodings to be applied to each input. The specified decodings are applied in declared array order.","default":[],"type":"array","items":{"type":"string","enum":["Zlib","Gzip","Base64"]}}},"required":["type","topics","bootstrapServers"]},{"description":"A stream of data being ingested from Kinesis.","title":"Kinesis Data Stream","type":"object","properties":{"type":{"example":"KinesisIngest","type":"string","enum":["KinesisIngest"]},"format":{"description":"The format used to decode each Kinesis record.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"Streamed Record Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"Records are JSON values. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new JSON value.\n  ","title":"JSON via Cypher","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the JSON value.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Records are serialized instances of `typeName` as described in the schema (a `.desc` descriptor file) at `schemaUrl`. For every record received, the given Cypher query will be re-executed with the parameter in the query set equal to the new (deserialized) Protobuf message.","title":"Protobuf via Cypher","type":"object","properties":{"type":{"example":"CypherProtobuf","type":"string","enum":["CypherProtobuf"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the Protobuf message.","default":"that","type":"string"},"schemaUrl":{"description":"URL (or local filename) of the Protobuf `.desc` file to load to parse the `typeName`.","type":"string"},"typeName":{"description":"Message type name to use from the given `.desc` file as the incoming message type.","type":"string"}},"required":["type","query","schemaUrl","typeName"]},{"description":"Records may have any format. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new value as a Cypher byte array.\n  ","title":"Raw Bytes via Cypher","type":"object","properties":{"type":{"example":"CypherRaw","type":"string","enum":["CypherRaw"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the byte array.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Ignore the data without further processing.","title":"Drop","type":"object","properties":{"type":{"example":"Drop","type":"string","enum":["Drop"]}},"required":["type"]},{"$ref":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}],"discriminator":{"propertyName":"type","mapping":{"QuinePatternJson":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}}},"streamName":{"description":"Name of the Kinesis stream to ingest.","type":"string"},"shardIds":{"description":"Shards IDs within the named kinesis stream to ingest; if empty or excluded, all shards on the stream are processed.","type":"array","items":{"type":"string"}},"parallelism":{"description":"Maximum number of records to write simultaneously.","default":16,"type":"integer","format":"int32"},"credentials":{"description":"Explicit AWS access key and secret to use. If not provided, defaults to environmental credentials according to the default AWS credential chain. See: <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>.","title":"AWS Credentials","type":"object","properties":{"accessKeyId":{"type":"string"},"secretAccessKey":{"type":"string"}},"required":["accessKeyId","secretAccessKey"]},"region":{"description":"AWS region code. e.g. `us-west-2`. If not provided, defaults according to the default AWS region provider chain. See: <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html#automatically-determine-the-aws-region-from-the-environment>.","title":"AWS Region","type":"object","properties":{"region":{"type":"string"}},"required":["region"]},"iteratorType":{"description":"Shard iterator type.","default":"Latest","oneOf":[{"type":"string","enum":["TrimHorizon","Latest"]},{"oneOf":[{"description":"All records starting after the provided sequence number.","title":"AfterSequenceNumber","type":"object","properties":{"type":{"example":"AfterSequenceNumber","type":"string","enum":["AfterSequenceNumber"]},"sequenceNumber":{"type":"string"}},"required":["type","sequenceNumber"]},{"description":"All records starting from the provided sequence number.","title":"AtSequenceNumber","type":"object","properties":{"type":{"example":"AtSequenceNumber","type":"string","enum":["AtSequenceNumber"]},"sequenceNumber":{"type":"string"}},"required":["type","sequenceNumber"]},{"description":"All records starting from the provided unix millisecond timestamp.","title":"AtTimestamp","type":"object","properties":{"type":{"example":"AtTimestamp","type":"string","enum":["AtTimestamp"]},"millisSinceEpoch":{"type":"integer","format":"int64"}},"required":["type","millisSinceEpoch"]}],"discriminator":{"propertyName":"type"}}]},"numRetries":{"description":"Number of retries to attempt on Kineses error.","default":3,"type":"integer","format":"int32"},"maximumPerSecond":{"description":"Maximum records to process per second.","type":"integer","format":"int32"},"recordDecoders":{"description":"List of decodings to be applied to each input, where specified decodings are applied in declared array order.","default":[],"type":"array","items":{"type":"string","enum":["Zlib","Gzip","Base64"]}},"checkpointSettings":{"description":"Optional stream checkpoint settings. If present, checkpointing will manage `iteratorType` and `shardIds`, ignoring those fields in the API request.","example":{"maxBatchSize":100,"maxBatchWait":1000},"title":"Scheduler Checkpoint Settings","type":"object","properties":{"maxBatchSize":{"description":"Maximum checkpoint batch size.","type":"integer","format":"int32"},"maxBatchWait":{"description":"Maximum checkpoint batch wait time in ms.","type":"integer","format":"int64"}},"required":["maxBatchSize","maxBatchWait"]}},"required":["type","streamName"]},{"description":"An infinite ingest stream which requires no data source and just produces new sequential numbers every time the stream is (re)started. The numbers are Java `Long`s` and will wrap at their max value.","title":"Number Iterator Ingest","type":"object","properties":{"type":{"example":"NumberIteratorIngest","type":"string","enum":["NumberIteratorIngest"]},"format":{"description":"Format by which a file will be interpreted as a stream of elements for ingest.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"File Ingest Format","default":{"query":"MATCH (x) WHERE id(x) = idFrom(toInteger($that)) SET x.i = toInteger($that)","type":"CypherLine"},"oneOf":[{"description":"For every row in a CSV file, the given Cypher query will be re-executed with the parameter in the query set to the parsed row. Rows are parsed into either a Cypher List of strings or a Map, depending on whether a `headers` row is available.","title":"CypherCSV","type":"object","properties":{"type":{"example":"CypherCsv","type":"string","enum":["CypherCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"Lines in the file should be JSON values. For every value received, the given Cypher query will be re-executed with the parameter in the query set equal to the new JSON value.   ","title":"CypherJson","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"For every line (LF/CRLF delimited) in the source, the given Cypher query will be re-executed with the parameter in the query set equal to a string matching the new line value. The newline is not included in this string.   ","title":"CypherLine","type":"object","properties":{"type":{"example":"CypherLine","type":"string","enum":["CypherLine"]},"query":{"description":"Cypher query to execute on each line","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]},{"description":"blah blah blah","title":"QuinePatternCSV","type":"object","properties":{"type":{"example":"QuinePatternCsv","type":"string","enum":["QuinePatternCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"TODO Add some docs here   ","title":"CypherJson","type":"object","properties":{"type":{"example":"QuinePatternJson","type":"string","enum":["QuinePatternJson"]},"query":{"description":"QuinePAttern query to execute on each record","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"TODO add some docs here  ","title":"QuinePatternLine","type":"object","properties":{"type":{"example":"QuinePatternLine","type":"string","enum":["QuinePatternLine"]},"query":{"description":"QuinePattern query to execute on each line","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]}],"discriminator":{"propertyName":"type"}},"startAtOffset":{"description":"Begin the stream with this number.","default":0,"type":"integer","format":"int64"},"ingestLimit":{"description":"Optionally end the stream after consuming this many items.","type":"integer","format":"int64"},"maximumPerSecond":{"description":"Limit the maximum rate of production to this many records per second. Note that this may be slowed by backpressure elsewhere in the system.","type":"integer","format":"int32"},"parallelism":{"description":"Maximum number of records to process at once.","default":16,"type":"integer","format":"int32"}},"required":["type"]},{"description":"An ingest stream from a file in S3, newline delimited. This ingest source is experimental and is subject to change without warning. In particular, there are known issues with durability when the stream is inactive for at least 1 minute.","title":"S3 File ingest (Experimental)","type":"object","properties":{"type":{"example":"S3Ingest","type":"string","enum":["S3Ingest"]},"format":{"description":"format used to decode each incoming line from a file in S3","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"File Ingest Format","default":{"query":"MATCH (x) WHERE id(x) = idFrom($that) SET x.content = $that","type":"CypherLine"},"oneOf":[{"description":"For every row in a CSV file, the given Cypher query will be re-executed with the parameter in the query set to the parsed row. Rows are parsed into either a Cypher List of strings or a Map, depending on whether a `headers` row is available.","title":"CypherCSV","type":"object","properties":{"type":{"example":"CypherCsv","type":"string","enum":["CypherCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"Lines in the file should be JSON values. For every value received, the given Cypher query will be re-executed with the parameter in the query set equal to the new JSON value.   ","title":"CypherJson","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"For every line (LF/CRLF delimited) in the source, the given Cypher query will be re-executed with the parameter in the query set equal to a string matching the new line value. The newline is not included in this string.   ","title":"CypherLine","type":"object","properties":{"type":{"example":"CypherLine","type":"string","enum":["CypherLine"]},"query":{"description":"Cypher query to execute on each line","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]},{"description":"blah blah blah","title":"QuinePatternCSV","type":"object","properties":{"type":{"example":"QuinePatternCsv","type":"string","enum":["QuinePatternCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"TODO Add some docs here   ","title":"CypherJson","type":"object","properties":{"type":{"example":"QuinePatternJson","type":"string","enum":["QuinePatternJson"]},"query":{"description":"QuinePAttern query to execute on each record","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"TODO add some docs here  ","title":"QuinePatternLine","type":"object","properties":{"type":{"example":"QuinePatternLine","type":"string","enum":["QuinePatternLine"]},"query":{"description":"QuinePattern query to execute on each line","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]}],"discriminator":{"propertyName":"type"}},"bucket":{"description":"S3 bucket name","type":"string"},"key":{"description":"S3 file name","type":"string"},"encoding":{"description":"text encoding used to read the file. Only UTF-8, US-ASCII and ISO-8859-1 are directly supported -- other encodings will transcoded to UTF-8 on the fly (and ingest may be slower).","default":"UTF-8","type":"string"},"parallelism":{"description":"maximum number of records being processed at once","default":16,"type":"integer","format":"int32"},"credentials":{"description":"Explicit AWS access key and secret to use. If not provided, defaults to environmental credentials according to the default AWS credential chain. See: <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>.","title":"AWS Credentials","type":"object","properties":{"accessKeyId":{"type":"string"},"secretAccessKey":{"type":"string"}},"required":["accessKeyId","secretAccessKey"]},"maximumLineSize":{"description":"maximum size (in bytes) of any line in the file","default":134217728,"type":"integer","format":"int32"},"startAtOffset":{"description":"start at the record with the given index. Useful for skipping some number of lines (e.g. CSV headers) or\nresuming ingest from a partially consumed file","default":0,"type":"integer","format":"int64"},"ingestLimit":{"description":"optionally limit how many records are ingested from this file.","type":"integer","format":"int64"},"maximumPerSecond":{"description":"maximum records to process per second","type":"integer","format":"int32"}},"required":["type","bucket","key"]},{"description":"An active stream of data being ingested from AWS SQS.","title":"Simple Queue Service Queue","type":"object","properties":{"type":{"example":"SQSIngest","type":"string","enum":["SQSIngest"]},"format":{"description":"Format used to decode each queued record.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"Streamed Record Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"Records are JSON values. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new JSON value.\n  ","title":"JSON via Cypher","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the JSON value.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Records are serialized instances of `typeName` as described in the schema (a `.desc` descriptor file) at `schemaUrl`. For every record received, the given Cypher query will be re-executed with the parameter in the query set equal to the new (deserialized) Protobuf message.","title":"Protobuf via Cypher","type":"object","properties":{"type":{"example":"CypherProtobuf","type":"string","enum":["CypherProtobuf"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the Protobuf message.","default":"that","type":"string"},"schemaUrl":{"description":"URL (or local filename) of the Protobuf `.desc` file to load to parse the `typeName`.","type":"string"},"typeName":{"description":"Message type name to use from the given `.desc` file as the incoming message type.","type":"string"}},"required":["type","query","schemaUrl","typeName"]},{"description":"Records may have any format. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new value as a Cypher byte array.\n  ","title":"Raw Bytes via Cypher","type":"object","properties":{"type":{"example":"CypherRaw","type":"string","enum":["CypherRaw"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the byte array.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Ignore the data without further processing.","title":"Drop","type":"object","properties":{"type":{"example":"Drop","type":"string","enum":["Drop"]}},"required":["type"]},{"$ref":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}],"discriminator":{"propertyName":"type","mapping":{"QuinePatternJson":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}}},"queueUrl":{"description":"URL of the queue to ingest.","type":"string"},"readParallelism":{"description":"Maximum number of records to read from the queue simultaneously.","default":1,"type":"integer","format":"int32"},"writeParallelism":{"description":"Maximum number of records to ingest simultaneously.","default":16,"type":"integer","format":"int32"},"credentials":{"description":"Explicit AWS access key and secret to use. If not provided, defaults to environmental credentials according to the default AWS credential chain. See: <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>.","title":"AWS Credentials","type":"object","properties":{"accessKeyId":{"type":"string"},"secretAccessKey":{"type":"string"}},"required":["accessKeyId","secretAccessKey"]},"region":{"description":"AWS region code. e.g. `us-west-2`. If not provided, defaults according to the default AWS region provider chain. See: <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html#automatically-determine-the-aws-region-from-the-environment>.","title":"AWS Region","type":"object","properties":{"region":{"type":"string"}},"required":["region"]},"deleteReadMessages":{"description":"Whether the queue consumer should acknowledge receipt of in-flight messages.","default":true,"type":"boolean"},"maximumPerSecond":{"description":"Maximum records to process per second.","type":"integer","format":"int32"},"recordDecoders":{"description":"List of decodings to be applied to each input, where specified decodings are applied in declared array order.","default":[],"type":"array","items":{"type":"string","enum":["Zlib","Gzip","Base64"]}}},"required":["type","queueUrl"]},{"description":"A server-issued event stream, as might be handled by the EventSource JavaScript API. Only consumes the `data` portion of an event.","title":"Server Sent Events Stream","type":"object","properties":{"type":{"example":"ServerSentEventsIngest","type":"string","enum":["ServerSentEventsIngest"]},"format":{"description":"Format used to decode each event's `data`.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"Streamed Record Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"Records are JSON values. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new JSON value.\n  ","title":"JSON via Cypher","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the JSON value.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Records are serialized instances of `typeName` as described in the schema (a `.desc` descriptor file) at `schemaUrl`. For every record received, the given Cypher query will be re-executed with the parameter in the query set equal to the new (deserialized) Protobuf message.","title":"Protobuf via Cypher","type":"object","properties":{"type":{"example":"CypherProtobuf","type":"string","enum":["CypherProtobuf"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the Protobuf message.","default":"that","type":"string"},"schemaUrl":{"description":"URL (or local filename) of the Protobuf `.desc` file to load to parse the `typeName`.","type":"string"},"typeName":{"description":"Message type name to use from the given `.desc` file as the incoming message type.","type":"string"}},"required":["type","query","schemaUrl","typeName"]},{"description":"Records may have any format. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new value as a Cypher byte array.\n  ","title":"Raw Bytes via Cypher","type":"object","properties":{"type":{"example":"CypherRaw","type":"string","enum":["CypherRaw"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the byte array.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Ignore the data without further processing.","title":"Drop","type":"object","properties":{"type":{"example":"Drop","type":"string","enum":["Drop"]}},"required":["type"]},{"$ref":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}],"discriminator":{"propertyName":"type","mapping":{"QuinePatternJson":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}}},"url":{"description":"URL of the server sent event stream.","type":"string"},"parallelism":{"description":"Maximum number of records to ingest simultaneously.","default":16,"type":"integer","format":"int32"},"maximumPerSecond":{"description":"Maximum records to process per second.","type":"integer","format":"int32"},"recordDecoders":{"description":"List of encodings that have been applied to each input. Decoding of each type is applied in order.","default":[],"type":"array","items":{"type":"string","enum":["Zlib","Gzip","Base64"]}}},"required":["type","url"]},{"description":"An active stream of data being ingested from standard input to this Quine process.","title":"Standard Input Ingest Stream","type":"object","properties":{"type":{"example":"StandardInputIngest","type":"string","enum":["StandardInputIngest"]},"format":{"description":"Format by which a file will be interpreted as a stream of elements for ingest.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"File Ingest Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"For every row in a CSV file, the given Cypher query will be re-executed with the parameter in the query set to the parsed row. Rows are parsed into either a Cypher List of strings or a Map, depending on whether a `headers` row is available.","title":"CypherCSV","type":"object","properties":{"type":{"example":"CypherCsv","type":"string","enum":["CypherCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"Lines in the file should be JSON values. For every value received, the given Cypher query will be re-executed with the parameter in the query set equal to the new JSON value.   ","title":"CypherJson","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"For every line (LF/CRLF delimited) in the source, the given Cypher query will be re-executed with the parameter in the query set equal to a string matching the new line value. The newline is not included in this string.   ","title":"CypherLine","type":"object","properties":{"type":{"example":"CypherLine","type":"string","enum":["CypherLine"]},"query":{"description":"Cypher query to execute on each line","type":"string"},"parameter":{"description":"name of the Cypher parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]},{"description":"blah blah blah","title":"QuinePatternCSV","type":"object","properties":{"type":{"example":"QuinePatternCsv","type":"string","enum":["QuinePatternCsv"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter holding the parsed CSV row.","default":"that","type":"string"},"headers":{"description":"Read a CSV file containing headers in the file's first row (`true`) or with no headers (`false`).\nAlternatively, an array of column headers can be passed in. If headers are not supplied, the resulting\ntype available to the Cypher query will be a List of strings with values accessible by index. When\nheaders are available (supplied or read from the file), the resulting type available to the Cypher\nquery will be a Map[String, String], with values accessible using the corresponding header string.\nCSV rows containing more records than the `headers` will have items that don't match a header column\ndiscarded. CSV rows with fewer columns than the `headers` will have `null` values for the missing headers.\nDefault: `false`.","default":false,"oneOf":[{"type":"boolean"},{"type":"array","items":{"type":"string"}}]},"delimiter":{"description":"CSV row delimiter character.","default":"Comma","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"quoteChar":{"description":"Character used to quote values in a field. Special characters (like new lines) inside of a quoted\nsection will be a part of the CSV value.","default":"DoubleQuote","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]},"escapeChar":{"description":"Character used to escape special characters.","default":"Backslash","type":"string","enum":["Backslash","Comma","Semicolon","Colon","Tab","Pipe","DoubleQuote"]}},"required":["type","query"]},{"description":"TODO Add some docs here   ","title":"CypherJson","type":"object","properties":{"type":{"example":"QuinePatternJson","type":"string","enum":["QuinePatternJson"]},"query":{"description":"QuinePAttern query to execute on each record","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the JSON value","default":"that","type":"string"}},"required":["type","query"]},{"description":"TODO add some docs here  ","title":"QuinePatternLine","type":"object","properties":{"type":{"example":"QuinePatternLine","type":"string","enum":["QuinePatternLine"]},"query":{"description":"QuinePattern query to execute on each line","type":"string"},"parameter":{"description":"name of the QuinePattern parameter holding the string line value","default":"that","type":"string"}},"required":["type","query"]}],"discriminator":{"propertyName":"type"}},"encoding":{"description":"Text encoding used to read data. Only UTF-8, US-ASCII and ISO-8859-1 are directly supported -- other encodings will be transcoded to UTF-8 on the fly (and ingest may be slower).","default":"UTF-8","type":"string"},"parallelism":{"description":"Maximum number of records process at once.","default":16,"type":"integer","format":"int32"},"maximumLineSize":{"description":"Maximum size (in bytes) of any line.","default":134217728,"type":"integer","format":"int32"},"maximumPerSecond":{"description":"Maximum records to process per second.","type":"integer","format":"int32"}},"required":["type"]},{"description":"A websocket stream started after a sequence of text messages.","title":"Websockets Ingest Stream (Simple Startup)","type":"object","properties":{"type":{"example":"WebsocketSimpleStartupIngest","type":"string","enum":["WebsocketSimpleStartupIngest"]},"format":{"description":"Format used to decode each incoming message.","example":{"query":"CREATE ($that)","type":"CypherJson"},"title":"Streamed Record Format","default":{"query":"CREATE ($that)","type":"CypherJson"},"oneOf":[{"description":"Records are JSON values. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new JSON value.\n  ","title":"JSON via Cypher","type":"object","properties":{"type":{"example":"CypherJson","type":"string","enum":["CypherJson"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the JSON value.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Records are serialized instances of `typeName` as described in the schema (a `.desc` descriptor file) at `schemaUrl`. For every record received, the given Cypher query will be re-executed with the parameter in the query set equal to the new (deserialized) Protobuf message.","title":"Protobuf via Cypher","type":"object","properties":{"type":{"example":"CypherProtobuf","type":"string","enum":["CypherProtobuf"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the Protobuf message.","default":"that","type":"string"},"schemaUrl":{"description":"URL (or local filename) of the Protobuf `.desc` file to load to parse the `typeName`.","type":"string"},"typeName":{"description":"Message type name to use from the given `.desc` file as the incoming message type.","type":"string"}},"required":["type","query","schemaUrl","typeName"]},{"description":"Records may have any format. For every record received, the\ngiven Cypher query will be re-executed with the parameter in the query set\nequal to the new value as a Cypher byte array.\n  ","title":"Raw Bytes via Cypher","type":"object","properties":{"type":{"example":"CypherRaw","type":"string","enum":["CypherRaw"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the byte array.","default":"that","type":"string"}},"required":["type","query"]},{"description":"Ignore the data without further processing.","title":"Drop","type":"object","properties":{"type":{"example":"Drop","type":"string","enum":["Drop"]}},"required":["type"]},{"$ref":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}],"discriminator":{"propertyName":"type","mapping":{"QuinePatternJson":"#/components/schemas/com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson"}}},"url":{"description":"Websocket (ws: or wss:) url to connect to.","type":"string"},"initMessages":{"description":"Initial messages to send to the server on connecting.","default":[],"type":"array","items":{"type":"string"}},"keepAlive":{"description":"Strategy to use for sending keepalive messages, if any.","title":"Websockets Keepalive Protocol","default":{"type":"PingPongInterval"},"oneOf":[{"description":"Only send data messages, no keepalives.","title":"No Keepalive","type":"object","properties":{"type":{"example":"NoKeepalive","type":"string","enum":["NoKeepalive"]}},"required":["type"]},{"description":"Send empty websocket messages at the specified interval (in milliseconds).","title":"Ping/Pong on interval","type":"object","properties":{"type":{"example":"PingPongInterval","type":"string","enum":["PingPongInterval"]},"intervalMillis":{"default":5000,"type":"integer","format":"int32"}},"required":["type"]},{"description":"Send the same text-based Websocket message at the specified interval (in milliseconds).","title":"Text Keepalive Message on Interval","type":"object","properties":{"type":{"example":"SendMessageInterval","type":"string","enum":["SendMessageInterval"]},"message":{"type":"string"},"intervalMillis":{"default":5000,"type":"integer","format":"int32"}},"required":["type","message"]}],"discriminator":{"propertyName":"type"}},"parallelism":{"description":"Maximum number of records to ingest simultaneously.","default":16,"type":"integer","format":"int32"},"encoding":{"description":"Text encoding used to read text messages in the stream. Only UTF-8, US-ASCII and ISO-8859-1 are directly\nsupported -- other encodings will transcoded to UTF-8 on the fly (and ingest may be slower).\n","default":"UTF-8","type":"string"}},"required":["type","url"]}],"discriminator":{"propertyName":"type"}},"com.thatdot.quine.routes.IngestStreamInfo":{"description":"An active stream of data being ingested.","example":{"status":"Running","settings":{"topics":["e1-source"],"bootstrapServers":"localhost:9092","groupId":"quine-e1-ingester","type":"KafkaIngest"},"stats":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000}},"title":"Ingest Stream Info","type":"object","properties":{"status":{"description":"Indicator of whether the ingest is still running, completed, etc.","example":"Running","type":"string","enum":["Running","Paused","Restored","Completed","Terminated","Failed"]},"message":{"description":"Error message about the ingest, if any","type":"string"},"settings":{"description":"Configuration of the ingest stream","anyOf":[{"$ref":"#/components/schemas/com.thatdot.quine.routes.IngestStreamConfiguration"}]},"stats":{"description":"Statistics on progress of running ingest stream","example":{"ingestedCount":123,"rates":{"count":123,"oneMinute":14.1,"fiveMinute":14.5,"fifteenMinute":14.15,"overall":14},"byteRates":{"count":8664000,"oneMinute":142030.1,"fiveMinute":145299.6,"fifteenMinute":144287.6,"overall":144400},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000},"title":"Statistics About a Running Ingest Stream","type":"object","properties":{"ingestedCount":{"description":"Number of source records (or lines) ingested so far","type":"integer","format":"int64"},"rates":{"description":"Records/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"byteRates":{"description":"Bytes/second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"startTime":{"description":"Time (in ISO-8601 UTC time) when the ingestion was started","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"totalRuntime":{"description":"Time (in milliseconds) that that the ingest has been running","type":"integer","format":"int64"}},"required":["ingestedCount","rates","byteRates","startTime","totalRuntime"]}},"required":["status","settings","stats"]},"com.thatdot.quine.routes.MetricsReport":{"description":"A selection of metrics registered by Quine, its libraries, and the JVM. Reported metrics may change based on which ingests and standing queries have been running since Quine startup, as well as the JVM distribution running Quine and the packaged version of any dependencies.","title":"Metrics Report","type":"object","properties":{"atTime":{"description":"A UTC Instant at which the returned metrics were collected","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"counters":{"description":"General-purpose counters for single numerical values","type":"array","items":{"description":"Counters record a single shared count, and give that count a name","title":"Metrics Counter","type":"object","properties":{"name":{"description":"Name of the metric being reported","type":"string"},"count":{"description":"The value tracked by this counter","type":"integer","format":"int64"}},"required":["name","count"]}},"timers":{"description":"Timers which measure how long an operation takes and how often that operation was timed, in milliseconds. These are measured with wall time, and hence may be skewed by other system events outside our control like GC pauses or system load.","type":"array","items":{"description":"A rough cumulative histogram of times recorded by a timer, as well as the average rate at which that timer is used to take new measurements. All times in milliseconds.","title":"Metrics Timer Summary","type":"object","properties":{"name":{"description":"Name of the metric being reported","type":"string"},"min":{"description":"Fastest recorded time","type":"number","format":"double"},"max":{"description":"Slowest recorded time","type":"number","format":"double"},"median":{"description":"Median recorded time","type":"number","format":"double"},"mean":{"description":"Average recorded time","type":"number","format":"double"},"q1":{"description":"First-quartile time","type":"number","format":"double"},"q3":{"description":"Third-quartile time","type":"number","format":"double"},"oneMinuteRate":{"description":"Average per-second rate of new events over the last one minute","type":"number","format":"double"},"90":{"description":"90th percentile time","type":"number","format":"double"},"99":{"description":"99th percentile time","type":"number","format":"double"},"80":{"description":"80th percentile time","type":"number","format":"double"},"20":{"description":"20th percentile time","type":"number","format":"double"},"10":{"description":"10th percentile time","type":"number","format":"double"}},"required":["name","min","max","median","mean","q1","q3","oneMinuteRate","90","99","80","20","10"]}},"gauges":{"description":"Gauges which report an instantaneously-sampled reading of a particular metric","type":"array","items":{"description":"Gauges provide a single point-in-time measurement, and give that measurement a name","title":"Metrics Numeric Gauge","type":"object","properties":{"name":{"description":"Name of the metric being reported","type":"string"},"value":{"description":"The latest measurement recorded by this gauge","type":"number","format":"double"}},"required":["name","value"]}}},"required":["atTime","counters","timers","gauges"]},"com.thatdot.quine.routes.QuickQuery":{"description":"Query that gets executed starting at some node (eg. by double-clicking or right-clicking).","example":{"name":"Adjacent Nodes","querySuffix":"MATCH (n)--(m) RETURN DISTINCT m","queryLanguage":"Cypher","sort":"Node"},"title":"Quick Query Action","type":"object","properties":{"name":{"description":"Name of the quick query. This is the name that will appear in the node drop-down menu","type":"string"},"querySuffix":{"description":"Suffix of a traversal query (eg, `.values('someKey')` for Gremlin or `RETURN n.someKey` for Cypher)","type":"string"},"queryLanguage":{"description":"Query language used in the query suffix","type":"string","enum":["Gremlin","Cypher"]},"sort":{"description":"Whether the query returns node or text results","type":"string","enum":["Text","Node"]},"edgeLabel":{"description":"If this label is set and the query is configured to return nodes, each of the nodes returned\nwill have an additional dotted edge which connect to the source node of the quick query","type":"string"}},"required":["name","querySuffix","queryLanguage","sort"]},"com.thatdot.quine.routes.QuineInfo":{"description":"Information collected when this version of the system was compiled.","example":{"version":"0.1","gitCommit":"b416b354bd4d5d2a9fe39bc55153afd312260f29","gitCommitDate":"2022-12-29T15:09:32-0500","javaVersion":"OpenJDK 64-Bit Server VM 1.8.0_312 (Azul Systems, Inc.)","persistenceWriteVersion":"10.1.0"},"title":"System Build Information","type":"object","properties":{"version":{"description":"Quine version","type":"string"},"gitCommit":{"description":"Current build git commit","type":"string"},"gitCommitDate":{"description":"Current build commit date","type":"string"},"javaVersion":{"description":"Java compilation version","type":"string"},"persistenceWriteVersion":{"description":"Persistence data format version","type":"string"}},"required":["version","javaVersion","persistenceWriteVersion"]},"com.thatdot.quine.routes.RegisteredStandingQuery":{"description":"Registered Standing Query.","example":{"name":"example-sq","internalId":"0956ad40-f390-43ca-b655-52b3b51443ff","pattern":{"query":"MATCH (n)-[:has_father]->(m) WHERE n.name IS NOT NULL AND m.name IS NOT NULL RETURN DISTINCT strId(n) AS kidWithDad","type":"Cypher"},"outputs":{"file-of-results":{"path":"kidsWithDads.jsonl","type":"WriteToFile"}},"includeCancellations":false,"inputBufferSize":32,"stats":{"localhost:67543":{"rates":{"count":123,"oneMinute":14.2,"fiveMinute":14.2,"fifteenMinute":14.2,"overall":14.2},"startTime":"2020-06-05T18:02:42.907Z","totalRuntime":60000,"bufferSize":20,"outputHashCode":14344}}},"title":"Registered Standing Query","type":"object","properties":{"name":{"type":"string"},"internalId":{"description":"Unique identifier for the query, generated when the query is registered","example":"5f27b818-027a-4008-b410-de01e1dd3a93","type":"string","format":"uuid"},"pattern":{"description":"Query or pattern to answer in a standing fashion","example":{"query":"MATCH (n)-[:has_father]->(m) WHERE n.name IS NOT NULL AND m.name IS NOT NULL RETURN DISTINCT strId(n) AS kidWithDad","type":"Cypher"},"title":"Standing Query Pattern","oneOf":[{"title":"Cypher","type":"object","properties":{"type":{"example":"Cypher","type":"string","enum":["Cypher"]},"query":{"description":"Cypher query describing the standing query pattern. This must take the form of\nMATCH <pattern> WHERE <condition> RETURN <columns>. When the `mode` is `DistinctId`,\nthe `RETURN` must also be `DISTINCT`.","type":"string"},"mode":{"description":"Mode used to execute Standing Query. `DistinctId` is the default and\nrecommended value. `MultipleValues` can be used for more\nexpressive query capabilities, but requires more computation and\nuses more memory.","default":"DistinctId","type":"string","enum":["DistinctId","MultipleValues","QuinePattern"]}},"required":["type","query"]}],"discriminator":{"propertyName":"type"}},"outputs":{"description":"output sinks into which all new standing query results should be enqueued - see Standing Query Result Output","type":"object","properties":{},"additionalProperties":{"$ref":"#/components/schemas/Standing Query Result Output"}},"includeCancellations":{"description":"Whether or not to include cancellations in the results of this query","type":"boolean"},"inputBufferSize":{"description":"how many standing query results to buffer on each host before backpressuring","type":"integer","format":"int32"},"stats":{"description":"Statistics on progress of running the standing query, per host - see Statistics About a Running Standing Query","type":"object","properties":{},"additionalProperties":{"title":"Statistics About a Running Standing Query","type":"object","properties":{"rates":{"description":"Results per second over different time periods","title":"Rates Summary","type":"object","properties":{"count":{"description":"Number of items metered","type":"integer","format":"int64"},"oneMinute":{"description":"Approximate rate per second in the last minute","type":"number","format":"double"},"fiveMinute":{"description":"Approximate rate per second in the last five minutes","type":"number","format":"double"},"fifteenMinute":{"description":"Approximate rate per second in the last fifteen minutes","type":"number","format":"double"},"overall":{"description":"Approximate rate per second since the meter was started","type":"number","format":"double"}},"required":["count","oneMinute","fiveMinute","fifteenMinute","overall"]},"startTime":{"description":"Time (in ISO-8601 UTC time) when the standing query was started","example":"2025-04-24T02:07:52.378543068Z","type":"string","format":"date-time"},"totalRuntime":{"description":"Time (in milliseconds) that that the standing query has been running","type":"integer","format":"int64"},"bufferSize":{"description":"How many standing query results are buffered and waiting to be emitted","type":"integer","format":"int32"},"outputHashCode":{"description":"Accumulated output hash code","type":"integer","format":"int64"}},"required":["rates","startTime","totalRuntime","bufferSize","outputHashCode"]}}},"required":["name","internalId","outputs","includeCancellations","inputBufferSize","stats"]},"com.thatdot.quine.routes.SampleQuery":{"description":"A query that appears as an option in the dropdown under the query bar.","title":"Sample Query","type":"object","properties":{"name":{"description":"A descriptive label for the query.","type":"string"},"query":{"description":"The Cypher or Gremlin query to be run on selection.","type":"string"}},"required":["name","query"]},"com.thatdot.quine.routes.StandingQueryDefinition":{"description":"Standing Query","example":{"pattern":{"query":"MATCH (n)-[:has_father]->(m) WHERE n.name IS NOT NULL AND m.name IS NOT NULL RETURN DISTINCT strId(n) AS kidWithDad","type":"Cypher"},"outputs":{"endpoint":{"url":"http://myendpoint","type":"PostToEndpoint"},"stdout":{"type":"PrintToStandardOut"}},"includeCancellations":true,"shouldCalculateResultHashCode":true},"title":"Standing Query","type":"object","properties":{"pattern":{"description":"A declarative structural graph pattern.","example":{"query":"MATCH (n)-[:has_father]->(m) WHERE n.name IS NOT NULL AND m.name IS NOT NULL RETURN DISTINCT strId(n) AS kidWithDad","type":"Cypher"},"title":"Standing Query Pattern","oneOf":[{"title":"Cypher","type":"object","properties":{"type":{"example":"Cypher","type":"string","enum":["Cypher"]},"query":{"description":"Cypher query describing the standing query pattern. This must take the form of\nMATCH <pattern> WHERE <condition> RETURN <columns>. When the `mode` is `DistinctId`,\nthe `RETURN` must also be `DISTINCT`.","type":"string"},"mode":{"description":"Mode used to execute Standing Query. `DistinctId` is the default and\nrecommended value. `MultipleValues` can be used for more\nexpressive query capabilities, but requires more computation and\nuses more memory.","default":"DistinctId","type":"string","enum":["DistinctId","MultipleValues","QuinePattern"]}},"required":["type","query"]}],"discriminator":{"propertyName":"type"}},"outputs":{"description":"A map of named standing query outs - see the Standing Query Result Output schema for the values","type":"object","properties":{},"additionalProperties":{"$ref":"#/components/schemas/Standing Query Result Output"}},"includeCancellations":{"description":"Whether or not to include cancellations in the results of this query","default":false,"type":"boolean"},"inputBufferSize":{"description":"how many standing query results to buffer before backpressuring","default":32,"type":"integer","format":"int32"},"shouldCalculateResultHashCode":{"description":"For debug and test only","default":false,"type":"boolean"}},"required":["pattern","outputs"]},"com.thatdot.quine.routes.StandingQueryOutputStructure":{"title":"Standing query output structure","oneOf":[{"description":"Output the result as is with no metadata. Warning: if this is used with `includeCancellations=true`then there will be no way to determine the difference between positive and negative matches","title":"Bare","type":"object","properties":{"type":{"example":"Bare","type":"string","enum":["Bare"]}},"required":["type"]},{"description":"Output the result wrapped in an object with a field for the metadata and a field for the query result","title":"With Metadata","type":"object","properties":{"type":{"example":"WithMetadata","type":"string","enum":["WithMetadata"]}},"required":["type"]}],"discriminator":{"propertyName":"type"}},"com.thatdot.quine.routes.StreamedRecordFormat.QuinePatternJson":{"type":"object","properties":{"type":{"example":"QuinePatternJson","type":"string","enum":["QuinePatternJson"]},"query":{"description":"Cypher query to execute on each record.","type":"string"},"parameter":{"description":"Name of the Cypher parameter to populate with the JSON value.","default":"that","type":"string"}},"required":["type","query"]},"com.thatdot.quine.routes.UiNodeAppearance":{"description":"Instructions for how to style the appearance of a node.","title":"UI Node Appearance","type":"object","properties":{"predicate":{"description":"Predicate by which nodes to apply this style to may be filtered","title":"UI Node Predicate","type":"object","properties":{"propertyKeys":{"description":"Properties the node must have to apply this style","type":"array","items":{"type":"string"}},"knownValues":{"description":"Properties with known constant values the node must have to apply this style","type":"object","properties":{},"additionalProperties":{"type":""}},"dbLabel":{"description":"Label the node must have to apply this style","type":"string"}},"required":["propertyKeys","knownValues"]},"size":{"description":"(Optional) size of this icon in pixels","type":"number","format":"double"},"icon":{"description":"(Optional) name of the icon character to use. For a list of icon names, refer to [this page](https://ionicons.com/v2/cheatsheet.html)","type":"string"},"color":{"description":"(Optional) color to use, specified as a hex value","type":"string"},"label":{"description":"(Optional) node label to use","title":"UI Node Label","oneOf":[{"description":"Use a specified, fixed value as a label.","title":"Fixed Label","type":"object","properties":{"type":{"example":"Constant","type":"string","enum":["Constant"]},"value":{"type":"string"}},"required":["type","value"]},{"description":"Use the value of a property as a label, with an optional prefix","title":"Property Value Label","type":"object","properties":{"type":{"example":"Property","type":"string","enum":["Property"]},"key":{"type":"string"},"prefix":{"type":"string"}},"required":["type","key"]}],"discriminator":{"propertyName":"type"}}},"required":["predicate"]},"endpoints.Errors":{"type":"array","items":{"type":"string"}}},"securitySchemes":{}}}